<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XXF</name>
    </assembly>
    <members>
        <member name="T:XXF.Api.AUTH_CODE_MSG">
            <summary>
            用户认证模块错误码（交互协议）类
            </summary>
        </member>
        <member name="F:XXF.Api.AUTH_CODE_MSG.msgs">
            <summary>
            错误码
            </summary>
        </member>
        <member name="M:XXF.Api.AUTH_CODE_MSG.Get(System.Int32)">
            <summary>
            根据错误码获取详细错误信息
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Api.ClientResult">
            <summary>
            与客户端通信协议
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.code">
            <summary>请求回复状态码</summary>
        </member>
        <member name="P:XXF.Api.ClientResult.success">
            <summary>请求是存成功</summary>
        </member>
        <member name="P:XXF.Api.ClientResult.statuscode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.repObject">
            <summary>
            请求输出的json object对象
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.resString">
            <summary>
            请求输出的json字符串
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.msg">
            <summary>
            请求返回的信息
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.total">
            <summary>
            返回结果的列表数
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.responseStream">
            <summary>
            请求输出流
            </summary>
        </member>
        <member name="P:XXF.Api.ClientResult.responseContentType">
            <summary>
            返回内容类型 小写格式
            </summary>
        </member>
        <member name="T:XXF.Api.ListResult`1">
            <summary>
            返回列表类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XXF.Api.ListResult`1.#ctor(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            获取列表集合
            </summary>
            <param name="list"></param>
            <param name="total"></param>
        </member>
        <member name="P:XXF.Api.ListResult`1.List">
            <summary>
            返回列表
            </summary>
        </member>
        <member name="P:XXF.Api.ListResult`1.Total">
            <summary>
            返回结果总数
            </summary>
        </member>
        <member name="T:XXF.Api.ListResult">
            <summary>
            默认DictionaryResult类型 （非泛型版本）
            </summary>
        </member>
        <member name="M:XXF.Api.ListResult.#ctor(System.Collections.Generic.List{XXF.ProjectTool.DictionaryResult},System.Int32)">
            <summary>
            获取列表集合
            </summary>
        </member>
        <member name="P:XXF.Api.ListResult.List">
            <summary>
            返回列表
            </summary>
        </member>
        <member name="P:XXF.Api.ListResult.Total">
            <summary>
            返回结果总数
            </summary>
        </member>
        <member name="T:XXF.Api.ServerResult">
            <summary>
            返回对象
            </summary>
        </member>
        <member name="F:XXF.Api.ServerResult._msg">
            <summary>
            消息返回
            </summary>
        </member>
        <member name="P:XXF.Api.ServerResult.code">
            <summary>
            返回值 1成功 -1失败 33无权限
            </summary>
        </member>
        <member name="P:XXF.Api.ServerResult.response">
            <summary>
            接受对象
            </summary>
        </member>
        <member name="P:XXF.Api.ServerResult.total">
            <summary>
            如列表，列表总数
            </summary>
        </member>
        <member name="T:XXF.Assemblys.AssemblyHelper">
            <summary>
            程序集操作帮助类
            </summary>
        </member>
        <member name="T:XXF.Assemblys.AutoModelList">
            <summary>
            自动生成Model类
            主要用于dynamic类型，可以在运行时自动生成model代码文件
            </summary>
        </member>
        <member name="M:XXF.Assemblys.AutoModelList.AutoCode(System.String,System.Object,System.String,System.String)">
            <summary>
            自动生成代码方法
            </summary>
            <param name="path"></param>
            <param name="model"></param>
            <param name="namespacestr"></param>
            <param name="classname"></param>
        </member>
        <member name="T:XXF.Attributes.OpenApiAttribute">
            <summary>
            openapi特性 直接公开方法至controller层
            </summary>
        </member>
        <member name="T:XXF.Attributes.OpenDocAttribute">
            <summary>
            开发接口文档描述
            </summary>
        </member>
        <member name="M:XXF.Attributes.OpenDocAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.String)">
            <summary>
            开发接口文档描述
            </summary>
            <param name="methodname">接口方法名（简短）</param>
            <param name="methoddescription">接口方法描述</param>
            <param name="paramdescription">接口参数描述</param>
            <param name="resultdescription">返回结果描述</param>
            <param name="resultstatedescription">返回结果状态码描述</param>
            <param name="author">作者</param>
            <param name="version">版本号</param>
            <param name="minversion">最小版本号（最低兼容版本号） 低于此版本将来会报错</param>
            <param name="note">其他记录</param>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.MethodName">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.MethodDescription">
            <summary>
            方法描述
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.ParamDescription">
            <summary>
            参数描述
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.ResultDescription">
            <summary>
            结果描述
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.ResultStateDescription">
            <summary>
            结果状态描述
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.MinVersion">
            <summary>
            最低兼容的版本号
            </summary>
        </member>
        <member name="P:XXF.Attributes.OpenDocAttribute.Note">
            <summary>
            备注
            </summary>
        </member>
        <member name="T:XXF.BaseService.MessageQuque.SimpleRedisMQ">
            <summary>
            Redis消息队列
            </summary>
        </member>
        <member name="M:XXF.BaseService.MessageQuque.SimpleRedisMQ.SendMessage``1(System.String,``0)">
            <summary>
            发送消息
            支持json可序列化,byte[],string类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queuename"></param>
            <param name="obj"></param>
        </member>
        <member name="M:XXF.BaseService.MessageQuque.SimpleRedisMQ.ReceiveMessages``1(System.String)">
            <summary>
            非阻塞接收消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queuename"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BaseService.MessageQuque.SimpleRedisMQ.ReceiveMessageWait``1(System.String,System.Int32)">
            <summary>
            阻塞形式接收消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queuename"></param>
            <param name="timeoutsecs"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.BaseService.Monitor.Model.tb_database_config_model">
            <summary>
            tb_database_config Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dblocalname">
            <summary>
            数据库本地昵称
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dbserver">
            <summary>
            数据库服务器地址
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dbname">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dbuser">
            <summary>
            数据库用户名
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dbpass">
            <summary>
            数据库密码
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_database_config_model.dbtype">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.Model.tb_error_log_model">
            <summary>
            tb_error_log Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.sqlservercreatetime">
            <summary>
            数据库创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.logcreatetime">
            <summary>
            日志项目中创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.logtype">
            <summary>
            日志类型:一般非正常错误,系统级严重错误
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.projectname">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.logtag">
            <summary>
            日志唯一标示(简短的方法名或者url,便于归类)
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.msg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.tracestack">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.remark">
            <summary>
            其他备注信息
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_error_log_model.developer">
            <summary>
            相关开发人员
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.Model.tb_log_model">
            <summary>
            tb_log Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.sqlservercreatetime">
            <summary>
            数据库创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.logcreatetime">
            <summary>
            日志项目中创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.logtype">
            <summary>
            日志类型:一般非正常错误,系统级严重错误,一般业务日志,系统日志
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.projectname">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.logtag">
            <summary>
            日志唯一标示(简短的方法名或者url,便于归类)
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_log_model.msg">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model">
            <summary>
            tb_timewatchlog_api Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.sqlservercreatetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.logcreatetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.time">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.projectname">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.url">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.msg">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.fromip">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_api_model.tag">
            <summary>
            
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.Model.tb_timewatchlog_model">
            <summary>
            tb_timewatchlog Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.sqlservercreatetime">
            <summary>
            数据库本地创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.logcreatetime">
            <summary>
            日志创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.time">
            <summary>
            耗时
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.projectname">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.logtype">
            <summary>
            耗时日志类型：普通日志=0，api接口日志=1，sql日志=2
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.logtag">
            <summary>
            日志标识,sql类型则为sql哈希,api类型则为url
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.url">
            <summary>
            当前url
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.msg">
            <summary>
            当前信息
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.fromip">
            <summary>
            来源ip(代码执行ip)
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.sqlip">
            <summary>
            sqlip地址
            </summary>
        </member>
        <member name="P:XXF.BaseService.Monitor.Model.tb_timewatchlog_model.remark">
            <summary>
            其他记录标记信息
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.SystemRuntime.BaseCollectMonitorDll">
            <summary>
            基础监控采集dll任务
            </summary>
        </member>
        <member name="M:XXF.BaseService.Monitor.SystemRuntime.BaseCollectMonitorDll.TryStart">
            <summary>
            线上环境运行入口
            </summary>
        </member>
        <member name="M:XXF.BaseService.Monitor.SystemRuntime.BaseCollectMonitorDll.Start">
            <summary>
            与第三方约定的运行接口方面
            </summary>
        </member>
        <member name="M:XXF.BaseService.Monitor.SystemRuntime.BaseCollectMonitorDll.Dispose">
            <summary>
            系统级稀有资源释放接口
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.SystemRuntime.DbShardingHelper">
            <summary>
            数据库分表分库帮助类
            </summary>
        </member>
        <member name="T:XXF.BaseService.Monitor.SystemRuntime.EnumUserRole">
            <summary>
            系统用户角色
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.BaseDllTask">
            <summary>
            基础dll任务
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.IsTesting">
            <summary>
            是否运行在测试中
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.AppConfig">
            <summary>
            任务的配置信息，类似项目app.config文件配置
            测试时需要手工代码填写配置,线上环境需要在任务发布的时候配置
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.SystemRuntimeInfo">
            <summary>
            任务底层运行时信息
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.SystemRuntimeOperator">
            <summary>
            任务底层运行时操作类
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.OpenOperator">
            <summary>
            任务公开第三方使用的操作类
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.BaseDllTask.SafeDisposeOperator">
            <summary>
            任务安全释放类
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.BaseDllTask.TryRun">
            <summary>
            线上环境运行入口
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.BaseDllTask.Run">
            <summary>
            与第三方约定的运行接口方面
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.BaseDllTask.TestRun">
            <summary>
            测试环境运行入口
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.BaseDllTask.Dispose">
            <summary>
            系统级稀有资源释放接口,及卸载回调接口
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.model.tb_error_model">
            <summary>
            tb_error Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.msg">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.errortype">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.errorcreatetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.taskid">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_error_model.nodeid">
            <summary>
            
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.model.tb_log_model">
            <summary>
            tb_log Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.msg">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.logtype">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.logcreatetime">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.taskid">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_log_model.nodeid">
            <summary>
            
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.model.tb_task_model">
            <summary>
            tb_task Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskname">
            <summary>
            任务名
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.categoryid">
            <summary>
            分类id
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.nodeid">
            <summary>
            节点id
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskcreatetime">
            <summary>
            任务创建时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskupdatetime">
            <summary>
            任务更新时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.tasklaststarttime">
            <summary>
            任务上一次执行时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.tasklastendtime">
            <summary>
            任务上一次结束时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.tasklasterrortime">
            <summary>
            任务出错时间
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskerrorcount">
            <summary>
            任务连续出错次数
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskruncount">
            <summary>
            任务总成功运行次数
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskcreateuserid">
            <summary>
            任务创建人id
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskstate">
            <summary>
            任务执行状态，查看代码枚举
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskversion">
            <summary>
            任务版本号
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskappconfigjson">
            <summary>
            任务app配置字典
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskcron">
            <summary>
            任务执行频率cron表达式
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskmainclassdllfilename">
            <summary>
            任务入口函数dll文件名
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskmainclassnamespace">
            <summary>
            任务入口执行函数的路径
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.model.tb_task_model.taskremark">
            <summary>
            任务备注
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator">
            <summary>
            任务公开给第三方使用操作类
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.DllTask">
            <summary>
            任务dll实例引用
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.GetTaskInstallDirectory">
            <summary>
            获取当前任务安装目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.SaveLocalTempData(System.Object)">
            <summary>
            保存任务临时数据至本地文件 ".json.txt"
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.GetLocalTempData``1">
            <summary>
            从本地临时文件获取任务临时数据 ".json.txt"
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.SaveDataBaseTempData(System.Object)">
            <summary>
            保存任务临时数据至数据库(数据不能太大,也不能很频繁)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.GetDataBaseTempData``1">
            <summary>
            获取数据库任务临时数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.Log(System.String)">
            <summary>
            写日志至线上数据库(不要频繁写日志，仅写一些便于分析的核心数据，或者非紧急的业务错误)
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XXF.BaseService.TaskManager.OpenOperator.TaskOpenOperator.Error(System.String,System.Exception)">
            <summary>
            写错误日志至线上数据库,这些错误会通知到开发人员，所以不要写一些正常的业务错误
            </summary>
            <param name="msg"></param>
            <param name="exp"></param>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.EnumTaskLogType">
            <summary>
            任务日志类型
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskAppConfigInfo">
            <summary>
            任务配置信息，类似app.config中的配置，仅支持字典
            正式环境在任务调度平台中配置获取
            测试环境需要自己重新创建实例赋值
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskLock">
            <summary>
            任务锁机制
            双重锁保护
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskSafeDisposeOperator">
            <summary>
            任务安全卸载类
            </summary>
        </member>
        <member name="M:XXF.BaseService.TaskManager.SystemRuntime.TaskSafeDisposeOperator.WaitDisposeFinished">
            <summary>
            阻塞等待资源释放标识,若DisposedState=Finished,则终止等待;若超时,则报错
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskDisposedState">
            <summary>
            任务当前资源释放状态
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskSafeDisposeTimeOutException">
            <summary>
            任务资源安全释放超时错误
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskSystemRuntimeInfo">
            <summary>
            任务系统运行时信息
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.SystemRuntime.TaskSystemRuntimeInfo.TaskConnectString">
            <summary>
            任务数据库连接字符串
            </summary>
        </member>
        <member name="P:XXF.BaseService.TaskManager.SystemRuntime.TaskSystemRuntimeInfo.TaskModel">
            <summary>
            任务信息
            </summary>
        </member>
        <member name="T:XXF.BaseService.TaskManager.SystemRuntime.TaskSystemRuntimeOperator">
            <summary>
            任务运行时底层操作类
            仅平台内部使用
            </summary>
        </member>
        <member name="F:XXF.BaseService.TaskManager.SystemRuntime.TaskSystemRuntimeOperator.DllTask">
            <summary>
            任务dll实例引用
            </summary>
        </member>
        <member name="T:XXF.Base.BaseApiController">
            <summary>
            基类api控制器
            </summary>
        </member>
        <member name="T:XXF.Base.BaseCommonController">
            <summary>
            常用项目controller层公用方法封装
            </summary>
        </member>
        <member name="M:XXF.Base.BaseCommonController.GetPagerResult``1(XXF.Api.ClientResult,System.Int32,System.Int32)">
            <summary>
            获取api分页结果(项目常用ajaxpager分页方式)
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Base.BaseCommonController.GetPagerResult(XXF.Api.ClientResult,System.Int32,System.Int32)">
            <summary>
            默认返回dynamic类型
            </summary>
            <param name="result"></param>
            <param name="pno"></param>
            <param name="pagesize"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Base.BaseCommonController.GetPagerResult(XXF.Api.ClientResult,System.Int32,System.Int32,System.String)">
            <summary>
            默认返回dynamic类型，
            但支持自动生成model类型说明文档至Models/auto/目录下,包含到项目中即可做model使用
            </summary>
            <param name="result"></param>
            <param name="pno"></param>
            <param name="pagesize"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Base.BaseApiController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
            <summary>
            拦截执行前方法
            </summary>
            <param name="requestContext"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Base.BaseApiController.GoToOpenApi(System.Web.Routing.RequestContext)">
            <summary>
            OpenApi属性自动公开api
            </summary>
            <param name="requestContext"></param>
        </member>
        <member name="M:XXF.Base.BaseApiController.Visit(System.Func{XXF.Db.DbConn,System.Object})">
            <summary>
            api访问回调封装
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Base.BaseApiRequestController">
            <summary>
            基类api请求控制器
            用于api访问
            </summary>
        </member>
        <member name="T:XXF.Base.BaseDal">
            <summary>
            基础Dal基类
            </summary>
        </member>
        <member name="T:XXF.BasicService.CertCenter.api">
            <summary>
            api Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.apiid">
            <summary>
            权限id
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.apptype">
            <summary>
            应用类型
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.appgradeno">
            <summary>
            应用级别
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.categoryid">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.apiname">
            <summary>
            接口名
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.apititle">
            <summary>
            接口标题
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.area">
            <summary>
            area
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.controller">
            <summary>
            controller
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.action">
            <summary>
            action
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.para">
            <summary>
            para
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.apidesc">
            <summary>
            api说明
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.api.freeze">
            <summary>
            是否冻结
            </summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.AuthToken.Clone">
            <summary>
            close this obj to another instance
            </summary>
            <returns></returns>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.token">
             <summary>
            授权token
             </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.id">
            <summary>
            唯一标识 用户时为：自增id，其它为userid
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.userid">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.username">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.appid">
            <summary>
            应用id
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.createtime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.AuthToken.expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.CertApiConfig.tokenurl">
            <summary>
            登录得到token 的url
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.CertApiConfig.authurl">
            <summary>
            权限验证的url
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.CertApiConfig.apilisturl">
            <summary>
            得到有权访问的api列表的url
            </summary>
        </member>
        <member name="P:XXF.BasicService.CertCenter.CertApiConfig.tokeninfourl">
            <summary>
            token 得到 Token信息 的 url
            </summary>
        </member>
        <member name="T:XXF.BasicService.CertCenter.CopyExtention">
            <summary>
            List特定类型的扩展。需要配合内部类型的clone方法
            </summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.CopyExtention.CloneList(System.Collections.Generic.List{XXF.BasicService.CertCenter.CertCacheItem})">
            <summary>
            clonelist 需要配合内部类型的clone方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.CopyExtention.CloneList(System.Collections.Generic.List{XXF.BasicService.CertCenter.api})">
            <summary>
            clonelist 需要配合内部类型的clone方法
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Api.Authcomm">
            <summary>
            认证通用类库 
            详情问徐品
            </summary>
        </member>
        <member name="M:XXF.Api.Authcomm.ToMD5String(System.String)">
            <summary>
            使用GBK编码字符串转MD5
            to use GBK to Decode default is uper
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.ToMD5String(System.String,System.Text.Encoding)">
            <summary>
            指定编码方式将字符串转MD5
            usr enc to Decode str and md5 default is uper
            </summary>
            <param name="str"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.TestTimeSpanOk(System.String,System.Int32)">
            <summary>
            测试时间是否在有效期内
            </summary>
            <param name="timespan"></param>
            <param name="safesecond"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.TestTimeSpanOk(System.Int64,System.Int32)">
            <summary>
            测试时间是否在有效期内
            </summary>
            <param name="timespan"></param>
            <param name="safesecond"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.ConnUrl(System.String,System.String,System.String)">
            <summary>
            根据控制器信息拼接默认url
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.GetAppConfig(System.String,System.String)">
            <summary>
            得到配置信息，找不到则使用默认值
            </summary>
            <param name="key"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.GetAppConfig(System.String)">
            <summary>
            根据key得到配置信息
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.ToSign(System.Collections.Generic.List{XXF.Api.ParmField},System.String)">
            <summary>
            进行认证签名
            </summary>
            <param name="para"></param>
            <param name="appsecret"></param>
        </member>
        <member name="M:XXF.Api.Authcomm.ToSign(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            进行认证签名
            </summary>
            <param name="dic"></param>
            <param name="appsecret"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.BaseSign(System.String,System.String,System.String)">
            <summary>
            获取基础的sign字段信息
            </summary>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <param name="timespan"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.GetTimeSpan(System.DateTime)">
            <summary>
            获取时间到1970-1-1的时间间隔（秒）
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.GetTimeSpan">
            <summary>
            获取当前时间到1970-1-1的时间间隔（秒）
            </summary>
        </member>
        <member name="M:XXF.Api.Authcomm.GetRequestPara(System.Web.HttpRequestBase)">
            <summary>
            获取请求的参数集合
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.Authcomm.GetRequestPara``1(System.Web.HttpRequestBase)">
            <summary>
            获取请求的参数集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Api.SignProvider">
            <summary>
            提供签名方式
            </summary>
            <param name="aparmList"></param>
        </member>
        <member name="T:XXF.Api.HttpServer">
            <summary>
            http通信服务
            </summary>
        </member>
        <member name="M:XXF.Api.HttpServer.getBody(System.Collections.Generic.List{XXF.Api.ParmField},System.String)">
            <summary>
            获取http body
            </summary>
            <param name="aparmList"></param>
            <param name="boundary"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.HttpServer.InvokeApi(System.String,System.Collections.Generic.List{XXF.Api.ParmField},XXF.Api.SignProvider)">
            <summary>
            调用api方法
            </summary>
            <param name="url"></param>
            <param name="aparmList"></param>
            <param name="signpro"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.HttpServer.InvokeApi(System.String,System.Collections.Generic.List{XXF.Api.ParmField})">
            <summary>
            调用api方法
            </summary>
            <param name="url"></param>
            <param name="aparmList"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Api.HttpServer.DefaultSignProvider(System.Collections.Generic.List{XXF.Api.ParmField})">
            <summary>
            默认签名方式
            all StringField will be signed and will add timespan,appid,appsecret; appid、appsecret from web.config or app.config
            </summary>
            <param name="para"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Api.ParmField">
            <summary>
            基础request参数类型
            </summary>
        </member>
        <member name="P:XXF.Api.ParmField.Key">
            <summary>
            参数key
            </summary>
        </member>
        <member name="P:XXF.Api.ParmField.Value">
            <summary>
            参数value
            </summary>
        </member>
        <member name="P:XXF.Api.ParmField.StreamValue">
            <summary>
            参数流内容
            </summary>
        </member>
        <member name="T:XXF.Api.StringField">
            <summary>
            字符串参数类型
            </summary>
        </member>
        <member name="T:XXF.Api.FileField">
            <summary>
            文件参数类型
            </summary>
        </member>
        <member name="T:XXF.Api.StreamField">
            <summary>
            数据流参数类型
            </summary>
        </member>
        <member name="T:XXF.BasicService.CertCenter.CertCenterProvider">
             <summary>
             使用api认证，请在配置文件里配置 UseLocalCert=fase （默认是false），并保证appid appsecret certcenterurl也进行了对应的配置
             使用本地认证，请在配置文件里配置 UseLocalCert=true ，并保证 appid，appsecret ，crmdyconnectstring,Mainconnectstring,qxconnectstring 也进行了对应的配置 
             <add key="appid" value="Customer"/>
             <add key="appsecret" value="1234"/>
            <add key="CertCenterUrl" value="http://192.168.17.234:3388"/>
             <add key="UseLocalCert" value="false"/>
             <add key ="CrmdyConnectString" value="server=192.168.17.232;Initial Catalog=dyd_new_crmdy;User ID=sa;Password=Xx~!@#;" />
            <add key ="MainConnectString" value="server=192.168.17.232;Initial Catalog=dyd_new_main;User ID=sa;Password=Xx~!@#;" />
            <add key="QxConnectString" value="server=192.168.17.232;database=dyd_new_qx;uid=sa;pwd=Xx~!@#;"/>
             </summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.CertCenterProvider.#ctor(XXF.BasicService.CertCenter.ServiceCertType,System.Boolean,System.Boolean)">
            <summary>
             
            </summary>
            <param name="certtype">验证类型</param>
            <param name="usetokencache">是否使用token缓存</param>
            <param name="useapilistcache">为所有有权接口缓存，进行本地验证。当此值为true时，usertokencache自动为true.不建议使用</param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.CertCenterProvider.Auth(System.String)">
            <summary>
            验证Token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.CertCenterProvider.DeleteCacheInfo(System.String)">
            <summary>
            删除Token
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.#ctor(XXF.BasicService.CertCenter.ServiceCertType)">
            <summary>
            默认使用本地token验证。
            </summary>
            <param name="certtype"></param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.#ctor(XXF.BasicService.CertCenter.ServiceCertType,System.Boolean,System.Boolean)">
            <summary>
             
            </summary>
            <param name="certtype">验证类型</param>
            <param name="usetokencache">是否使用token缓存</param>
            <param name="useapilistcache">为所有有权接口缓存，进行本地验证。当此值为true时，usertokencache自动为true.不建议使用</param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.Login(System.String,System.String)">
            <summary>
            登录，从config中得到appid appsecret ，直接登录(指当前应用为非api，不调用api登录接口，直接请求权限中心登录)
            </summary>
            <param name="userid"></param>
            <param name="pwd"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.Login(System.String,System.String,System.String,System.String)">
            <summary>
            登录 直接登录(指当前应用为非api，不调用api登录接口，直接请求权限中心登录)
            </summary>
            <param name="userid"></param>
            <param name="pwd"></param>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.Login(System.Web.Mvc.Controller)">
            <summary>
            app请求登录，直接转certcenter进行登录验证。
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.Auth(System.String)">
            <summary>验证token是否有效或是否已登录。</summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.RefreshToken(System.String)">
            <summary> 刷新token过期时间 返回新token信息 </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.cacheAuth(System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            缓存验证过 初次或过期时重新得到所有有权接口列表。 配置参数名:AuthCacheExpiresMin 
            </summary>
            <param name="token"></param>
            <param name="apiid"></param>
            <param name="apiname"></param>
            <param name="area"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.cacheTestAuth(System.Int32,System.String,System.String,System.String,System.String,XXF.BasicService.CertCenter.CertCacheItem)">
            <summary>
            缓存权限验证
            </summary>
            <param name="apiid"></param>
            <param name="apiname"></param>
            <param name="area"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.GetApiList(System.String)">
            <summary>得到授权接口列表</summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.ReqGetTokenInfo(System.String)">
            <summary>得到token对应信息</summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.GetTokenInfo(System.String)">
            <summary>
            得到Token的详细信息，包含用户名、过期时间、appid等。 无时返回null
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.GetUserName(System.String)">
            <summary>
            得到用户名， 空时返回空字符串 而非null
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.TestSignAndTime(System.Web.Mvc.Controller)">
            <summary>
            验证签名，请求是否超时，如果返回为false时，验证结果信息在result变量里。 
            </summary>
            <param name="controller"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.TestSign(System.Web.Mvc.Controller)">
            <summary>
            appid和token +appsecret md5 老接口验证
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.TestTokenExist(System.Web.Mvc.Controller)">
            <summary>
            检查请求是否传入了token false时返回信息在result中
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.LogOut(System.Web.Mvc.Controller)">
            <summary>
            退出登录
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.LogOut(System.String)">
            <summary>
            退出登录
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.GetTokenFromReq(System.Web.Mvc.Controller)">
            <summary>
            从请求中得到token 字符串
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.SuperAuth(System.Web.Mvc.Controller)">
            <summary>
            当前 businessapi customerapi 应采用的方法 包含 签名和登录验证 为false时 ressult.msg 里包含错误信息。
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.OnlineCert.DeleteCacheInfo(System.String)">
            <summary>
            删除缓存中的认证信息，当前用于修改用户名后重得到用户名，防从缓存中得到。
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.#ctor(XXF.BasicService.CertCenter.ServiceCertType,System.Boolean,System.Boolean)">
            <summary>
             
            </summary>
            <param name="certtype">验证类型</param>
            <param name="usetokencache">是否使用token缓存</param>
            <param name="useapilistcache">为所有有权接口缓存，进行本地验证。当此值为true时，usertokencache自动为true.不建议使用</param>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.getManage(XXF.Db.DbConn,System.String)">
            <summary>根据userid得到管理员工信息</summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.getShop(XXF.Db.DbConn,System.String)">
            <summary>根据userid得到管理员工信息</summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.getUser(XXF.Db.DbConn,System.String)">
            <summary></summary>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.GetExpiresminutes(XXF.BasicService.CertCenter.ServiceCertType)">
            <summary>  得到过期时间 </summary>
            <param name="tokentype"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.CertCenter.LocalCert.Add(XXF.Db.DbConn,XXF.BasicService.CertCenter.AuthToken,XXF.BasicService.CertCenter.ServiceCertType)">
            <summary>
            createtime expiresetime不用传。
            </summary>
            <param name="PubConn"></param>
            <param name="model"></param>
            <param name="tokentype"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.BasicService.CertCenter.CertCodeEnum">
            <summary>
            权限中心Code码枚举
            </summary>
        </member>
        <member name="F:XXF.BasicService.CertCenter.CertCodeEnum.NotExist">
            <summary>
            不存在 -905
            </summary>
        </member>
        <member name="F:XXF.BasicService.CertCenter.CertCodeEnum.MisParameter">
            <summary>
            缺少参数 -5
            </summary>
        </member>
        <member name="F:XXF.BasicService.CertCenter.CertCodeEnum.NormalError">
            <summary>
            普通错误 -1
            </summary>
        </member>
        <member name="F:XXF.BasicService.CertCenter.CertCodeEnum.Success">
            <summary>
            成功 1
            </summary>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.ConfigCenterProvider.CallApiGetC(System.String,System.String)">
            <summary>获取一个配置参数</summary>
            <param name="xmdh"></param>
            <param name="csmc"></param>
            <param name="cgapp">是否修改AppSetting</param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.ConfigCenterProvider.CallApiGetC(System.String)">
            <summary>得到一个项目的参数</summary>
            <param name="xmdh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.ConfigCenterProvider.GetAllForConfig(System.String)">
            <summary>获取单个项目所有信息</summary>
            <param name="xmdh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.ConfigCenterProvider.GetOneForConfig(System.String,System.String)">
            <summary>获取指定配置信息</summary>
            <param name="xmdh"></param>
            <param name="csmc"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Timered.TimerHandle.init">
            <summary>初始化</summary>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Timered.TimerHandle.GetConfigModel(Newtonsoft.Json.Linq.JObject)">
            <summary>得到ConfigModel</summary>
            <param name="jo"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Timered.TimerHandle.TimeToChange(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>自动更新</summary>
            <param name="source"></param>
            <param name="e"></param>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Xml.XmlHandle.GetConfigXml(System.String,System.String)">
            <summary>得到单个值</summary>
            <param name="csmc"></param>
            <param name="xmdh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Xml.XmlHandle.GetConfigModel">
            <summary>得到Xml字符串</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.ConfigCenter.Xml.XmlHandle.GetConfigXmlList(System.String)">
            <summary>得到list</summary>
            <param name="xmdh"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.Dal.QueueDal">
            <summary>
            队列处理
            </summary>
        </member>
        <member name="M:XXF.BasicService.MonitorPlatform.Dal.QueueDal.AddtimeWatchInfoQueue(XXF.BasicService.MonitorPlatform.TimeWatchInfo)">
            <summary>
            添加耗时队列
            </summary>
            <param name="timeWatchInfo"></param>
        </member>
        <member name="M:XXF.BasicService.MonitorPlatform.Dal.QueueDal.FQueuedal(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            添加耗时日志
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XXF.BasicService.MonitorPlatform.Dal.QueueDal.TimerOperate">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model">
            <summary>
            tb_ErrorLog Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.Url">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.Msg">
            <summary>
            错误日志
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_ErrorLog_model.Stack">
            <summary>
            错误堆栈
            </summary>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model">
            <summary>
            tb_TimeWatchLog Data Structure.
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.ID">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Type">
            <summary>
            类型：0 默认，1 sql，2 功能
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Time">
            <summary>
            耗时
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.ProjectName">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Url">
            <summary>
            请求url
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Msg">
            <summary>
            消息日志
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Tag">
            <summary>
            其他标记备注
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Lyip">
            <summary>
            请求Ip
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Dyduniquetag">
            <summary>
            手机唯一标识
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Dydphoneversion">
            <summary>
            手机端版本号
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Dydphonedevice">
            <summary>
            手机设备号
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.Dydtoken">
            <summary>
            用户token
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.RequseUrl">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.tb_TimeWatchLog_model.ServerIp">
            <summary>
            服务器IP
            </summary>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.Model.ParamBinds">
            <summary>
            传参绑定类
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Ip">
            <summary>
            请求Ip
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Dyduniquetag">
            <summary>
            手机唯一标识
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Dydphoneversion">
            <summary>
            手机端版本号
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Dydphonedevice">
            <summary>
            手机设备号
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Dydtoken">
            <summary>
            用户token
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.RequseUrl">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.Msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:XXF.BasicService.MonitorPlatform.Model.ParamBinds.ServerIp">
            <summary>
            服务器IP
            </summary>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.MonitorPlatformHelper">
            <summary>
            平台监控帮助类
            后续需要加入缓冲层,进行批量写，减少数据层压力
            </summary>
        </member>
        <member name="M:XXF.BasicService.MonitorPlatform.MonitorPlatformHelper.AddErrorLog(XXF.BasicService.MonitorPlatform.ErrorInfo)">
            <summary>
            添加错误日志
            </summary>
            <param name="errorinfo"></param>
        </member>
        <member name="M:XXF.BasicService.MonitorPlatform.MonitorPlatformHelper.AddTimeWatchLog(XXF.BasicService.MonitorPlatform.TimeWatchInfo)">
            <summary>
            添加耗时日志
            </summary>
            <param name="timewatchinfo"></param>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.ErrorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:XXF.BasicService.MonitorPlatform.TimeWatchInfo">
            <summary>
            耗时信息
            </summary>
        </member>
        <member name="T:XXF.BasicService.NotifyCenter.NotifyCenterProvider">
            <summary>
            消息中心
            </summary>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SendMessage(System.String,System.Collections.Generic.Dictionary{System.String,System.String},XXF.BasicService.NotifyCenter.NCCustomerInfo,System.String)">
            <summary>
            发送信息
            </summary>
            <param name="templateNo">模板编号</param>
            <param name="parameters">参数</param>
            <param name="customerInfo">客户联系信息</param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SendMessage(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{XXF.BasicService.NotifyCenter.NCCustomerInfo},System.String)">
            <summary>
            批量发送信息
            </summary>
            <param name="templateNo">模板编号</param>
            <param name="parameters">参数</param>
            <param name="customerInfo">客户联系信息</param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.BatchSendMessage(System.String,System.Collections.Generic.Dictionary{System.String,System.String},XXF.BasicService.NotifyCenter.NCCustomerInfo)">
            <summary>
            批量推送消息
            </summary>
            <param name="templateNo"></param>
            <param name="parameters"></param>
            <param name="customerInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.ListNotifys(System.String,System.Int32,System.Int32)">
            <summary>
            获取用户的消息列表
            </summary>
            <param name="yhzh"></param>
            <param name="pageNo"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SignDelete(System.String,System.Int64)">
            <summary>
            标记消息为清除
            </summary>
            <param name="yhzh"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SignDelete(System.String,System.String)">
            <summary>
            标记消息为清除 批量
            </summary>
            <param name="yhzh"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SignRead(System.String,System.Int64)">
            <summary>
            标记消息为已读
            </summary>
            <param name="yhzh"></param>
            <param name="queueID"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.GetParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            解析消息参数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.GetCustomerInfo(XXF.BasicService.NotifyCenter.NCCustomerInfo)">
            <summary>
            解析消息发送目标
            </summary>
            <param name="customerInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.GetCustomerInfos(System.Collections.Generic.List{XXF.BasicService.NotifyCenter.NCCustomerInfo})">
            <summary>
            解析消息发送目标
            </summary>
            <param name="customerInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NotifyCenterProvider.SendMessageAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},XXF.BasicService.NotifyCenter.NCCustomerInfo,System.String)">
            <summary>
            异步发送信息
            </summary>
            <param name="templateNo">模板编号</param>
            <param name="parameters">参数</param>
            <param name="customerInfo">客户联系信息</param>
            <returns></returns>
        </member>
        <member name="T:XXF.BasicService.NotifyCenter.NCConfig">
            <summary>
            消息中心配置
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCConfig.ApiUrl">
            <summary>
            访问的API地址
            </summary>
        </member>
        <member name="T:XXF.BasicService.NotifyCenter.NCCustomerInfo">
            <summary>
            消息中心 消息发送目标信息
            </summary>
        </member>
        <member name="M:XXF.BasicService.NotifyCenter.NCCustomerInfo.#ctor(System.String,System.String,XXF.BasicService.NotifyCenter.PhonePushLinkModel,System.String)">
            <summary>
            用户信息
            </summary>
            <param name="mobileLink">手机号</param>
            <param name="emailLink">邮件地址</param>
            <param name="phonePushLink">推送唯一设备号</param>
            <param name="QQLink">qq号码</param>
            <param name="yhzh">用户账号</param>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCCustomerInfo.MobileLink">
            <summary>
            手机联系方式
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCCustomerInfo.EmailLink">
            <summary>
            邮件地址
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCCustomerInfo.PhonePushLink">
            <summary>
            手机推送联系 int手机类型 string 手机appid
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCCustomerInfo.QQLink">
            <summary>
            QQ号
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.PhonePushLinkModel.DeviceType">
            <summary>
            设备类型 ios=1 andserial=2
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.PhonePushLinkModel.AppInfo">
            <summary>
            设备唯一标识
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.PhonePushLinkModel.CutomerType">
            <summary>
            用户类型 0用户 1商户 2用户网上下载
            </summary>
        </member>
        <member name="T:XXF.BasicService.NotifyCenter.NCResult">
            <summary>
            消息中心返回结果
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCResult.code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCResult.msg">
            <summary>
            提示
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCResult.response">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:XXF.BasicService.NotifyCenter.NCResult.total">
            <summary>
            数量
            </summary>
        </member>
        <member name="T:XXF.Cache.CacheFileInfo">
            <summary>
            文件缓存信息
            </summary>
        </member>
        <member name="P:XXF.Cache.CacheFileInfo.RefreashMethod">
            <summary>
            缓存回调数据刷新函数
            </summary>
        </member>
        <member name="P:XXF.Cache.CacheFileInfo.CacheData">
            <summary>
            缓存数据
            </summary>
        </member>
        <member name="P:XXF.Cache.CacheFileInfo.IintervalTime">
            <summary>
            间隔时间 秒为单位,（系统自身刷新频率为5秒，故可能有5秒延迟）
            </summary>
        </member>
        <member name="P:XXF.Cache.CacheFileInfo.LastRefreashTime">
            <summary>
            上一次缓存刷新时间
            </summary>
        </member>
        <member name="T:XXF.Cache.CacheFileProvider">
            <summary>
            缓存文件提供类
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheFileProvider.Register(System.String,XXF.Cache.CacheFileInfo)">
            <summary>
            注册缓存
            </summary>
            <param name="cachekey"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Cache.CacheFileProvider.GetCache(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="cachekey"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Cache.CacheFileProvider.Run">
            <summary>
            刷新缓存线程回调
            </summary>
        </member>
        <member name="T:XXF.Cache.CacheHelper">
            <summary>
            缓存帮助类
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheHelper.GetCache(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="CacheKey">键</param>
        </member>
        <member name="M:XXF.Cache.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheHelper.SetCache(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheHelper.RemoveAllCache(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
        </member>
        <member name="M:XXF.Cache.CacheHelper.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:XXF.Cache.ConfigCacheModel`1">
            <summary>
            配置缓存Model
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XXF.Cache.ConfigCacheModel`1.ConfigKey">
            <summary>
            配置Key
            </summary>
        </member>
        <member name="P:XXF.Cache.ConfigCacheModel`1.RefreshMethod">
            <summary>
            缓存回调数据刷新函数
            </summary>
        </member>
        <member name="P:XXF.Cache.ConfigCacheModel`1.RefreshDataByLocalFile">
            <summary>
            缓存回调函数 本地文件
            </summary>
        </member>
        <member name="P:XXF.Cache.ConfigCacheModel`1.IntervalTime">
            <summary>
            间隔时间 秒为单位,（系统自身刷新频率为5秒，故可能有5秒延迟）
            </summary>
        </member>
        <member name="P:XXF.Cache.ConfigCacheModel`1.LastRefreshTime">
            <summary>
            上一次缓存刷新时间
            </summary>
        </member>
        <member name="T:XXF.Cache.ConfigCacheProvider`1">
            <summary>
            配置缓存提供操作类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XXF.Cache.ConfigCacheProvider`1.#ctor(System.String,System.Func{System.DateTime,`0},System.Action{`0},System.Int32)">
            <summary>
            初始化函数
            </summary>
            <param name="configKey">配置Key值</param>
            <param name="refreshMethod">刷新回调函数</param>
            <param name="refreshFullMethod">刷新回调函数 使用本地文件数据刷新</param>
            <param name="intervalTime">间隔时间 秒</param>
        </member>
        <member name="M:XXF.Cache.ConfigCacheProvider`1.ReRefresh">
            <summary>
            刷新数据  调用注册的刷新回调函数
            </summary>
        </member>
        <member name="T:XXF.Common.IOHelper">
            <summary>
            IO操作帮助类
            </summary>
        </member>
        <member name="M:XXF.Common.IOHelper.CreateDirectory(System.String)">
            <summary>
            根据文件路径，创建文件对应的文件夹，若已存在则跳过
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:XXF.Common.IOHelper.CopyDirectory(System.String,System.String)">
            <summary>
            目录拷贝
            不支持父子目录拷贝，否则出现死循环递归
            </summary>
            <param name="srcDir"></param>
            <param name="tgtDir"></param>
        </member>
        <member name="M:XXF.Common.IOHelper.DataTableToExcelFile(System.Data.DataTable,System.String)">
            <summary>
            datatable 导出 excel文件
            </summary>
            <param name="tb"></param>
            <param name="filefullname"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.IOHelper.DateTableToExcelFileBytes(System.Data.DataTable,System.String)">
            <summary>
            datatable 导出 excel文件
            </summary>
        </member>
        <member name="M:XXF.Common.IOHelper.DataTableToCSVFile(System.Data.DataTable,System.String)">
            <summary>
            datatable 导出 excel csv文件
            </summary>
        </member>
        <member name="T:XXF.Common.SafeEcho">
            <summary>
            安全的在页面中输出各种内容
            包括过滤xss脚本
            </summary>
        </member>
        <member name="M:XXF.Common.SafeEcho.Input(System.String)">
            <summary>
            输出input的value
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Img(System.String)">
            <summary>
            输出img的src
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.TextArea(System.String)">
            <summary>
            在textarea中输出内容
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.RemoveMoreSpace(System.String)">
            <summary>
            去除2个以上的空格
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Text(System.String)">
            <summary>
            在页面输出文本内容
            会将\n\r转换成br,\t转换成4个nbsp
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Html(System.String)">
            <summary>
            输出动态html代码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Url(System.String)">
            <summary>
            输出url
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Title(System.String)">
            <summary>
            输出Title
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Title(System.String,System.Int32)">
            <summary>
            输出Title
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Meta(System.String)">
            <summary>
            输出Meta
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Meta(System.String,System.Int32)">
            <summary>
            输出Meta
            </summary>
            <param name="str"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.SafeEcho.Attr(System.String)">
            <summary>
            输出js脚本
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Common.TimeHelper">
            <summary>
            时间类函数
            </summary>
        </member>
        <member name="M:XXF.Common.TimeHelper.IsExceedTime(System.Int32,System.String)">
            <summary>
            时间是否超出指定的小时数
            </summary>
            <param name="hours"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.TimeHelper.IntervalTimeSpan(System.DateTime,System.DateTime)">
            <summary>
            获取两段时间的间隔时间
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.TimeHelper.IntervalTimeMonthTable(System.DateTime,System.DateTime)">
            <summary>
            转化成分月形式的表
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.TimeHelper.LastDayOfMonth(System.DateTime)">
            <summary>
            取得某月的最后一天
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Common.TimeHelper.FirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定月份第一天
            </summary>
            <param name="datetime"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Common.XXFConfig">
            <summary>
            XXF配置文件
            通过配置中心读取XXF的日志
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.WriteVisitCertCenterTimeWatchLog">
            <summary>
            是否记录访问认证中心的耗时（得到Token信息和验证Token）
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteErrorLog">
            <summary>
            是否写错误日志
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteVisitLog">
            <summary>
            是否拦截访问日志
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteErrorLogToMonitorPlatform">
            <summary>
            错误日志是否写入监控平台
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteErrorLogToLocalFile">
            <summary>
            错误日志是否写入本地文件
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteCommonLog">
            <summary>
            是否写常用日志
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteCommonLogToMonitorPlatform">
            <summary>
            常用日志是否写入监控平台
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteCommonLogToLocalFile">
            <summary>
            常用日志是否写入本地文件
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteTimeWatchLog">
            <summary>
            是否写耗时日志
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteTimeWatchLogToMonitorPlatform">
            <summary>
            耗时日志是否写入监控平台
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsWriteTimeWatchLogToLocalFile">
            <summary>
            耗时日志是否写入本地文件
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.TimeWatchConnectionString">
            <summary>
            耗时监控数据库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.MonitorPlatformConnectionString">
            <summary>
            监控平台数据库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.MainConnectString">
            <summary>
            点啊点主库数据库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.ConfigConnectString">
            <summary>
            点啊点配置数据库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.IsEnabledDepotsConnectByConfig">
            <summary>
            是否启用配置分库连接--默认不启用
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.ProjectName">
            <summary>
            当前项目名称
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.ProjectDeveloper">
            <summary>
            当前项目默认开发人员
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.ClusterConnectString">
            <summary>
            集群性能监控库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.PlatformManageConnectString">
            <summary>
            集群性能监控库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.TimeWatchConnectString">
            <summary>
            耗时库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.UnityLogConnectString">
            <summary>
            集群性能监控库连接
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.TableCreateSqlTxtUrl">
            <summary>
            创建月表OR日表SQL路径
            </summary>
        </member>
        <member name="F:XXF.Common.XXFConfig.TableCreateType">
            <summary>
            创建DLL执行创建的类型（Day：日表,Month：月表）
            </summary>
        </member>
        <member name="M:XXF.Common.XXFConfig.Get(System.String)">
            <summary>
            根据key获取内容
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:XXF.Db.Dapper.DbConnFactory._conn">
            <summary>数据库连接内部字段</summary>
        </member>
        <member name="F:XXF.Db.Dapper.DbConnFactory._iDb">
            <summary>
            map扩展数据库对象
            </summary>
        </member>
        <member name="F:XXF.Db.Dapper.DbConnFactory._dbtype">
            <summary>数据库类型</summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConn(System.String)">
            <summary>
            创建连接
            </summary>
            <param name="connectionString">数据库类型:默认sqlserver</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConn(XXF.Db.DbType)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConn(XXF.Db.DbType,System.String)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConn(XXF.Db.DbType,System.String,System.String,System.String,System.String)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="AServerName">服务器名称</param>
            <param name="ADatabaseName">数据库名称</param>
            <param name="ALoginName">用户</param>
            <param name="ALoginPass">密码</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConn(XXF.Db.DbType,System.Data.Common.DbConnection)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="ACn">已有的连接</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.CreateConnString(XXF.Db.DbType,System.String,System.String,System.String,System.String)">
            <summary>取得数据库连接字符串(SQL传所有参数、ORACLE传AServerName ALoginName ALoginPass、ACCESS传ADatabaseName ALoginPass)</summary>
            <param name="dbtype">数据库类型</param>
            <param name="AServerName">服务器名</param>
            <param name="ADatabaseName">数据库名</param>
            <param name="ALoginName">用户</param>
            <param name="ALoginPass">密码</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.OpenMapExt">
            <summary>
            打开映射扩展对象
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.Open">
            <summary>打开数据库连接
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.Close">
            <summary>关闭数据库连接
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.Dispose">
            <summary>释放
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.GetConnection">
            <summary>取得数据库连接对象</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.BeginTransaction">
            <summary>启动事务</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.Commit">
            <summary>提交事务
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.Rollback">
            <summary>回滚事务
            </summary>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.GetTransaction">
            <summary>取得事务对象</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.Dapper.DbConnFactory.GetServerDate">
            <summary>
            获取服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="P:XXF.Db.Dapper.DbConnFactory.IsWatchTime">
            <summary>
            是否监控sql耗时
            </summary>
        </member>
        <member name="P:XXF.Db.Dapper.DbConnFactory.DbType">
            <summary>数据库类型
            </summary>
        </member>
        <member name="P:XXF.Db.Dapper.DbConnFactory.ConnString">
            <summary>连接字符串
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.SetMappingAssemblies(System.Collections.Generic.IList{System.Reflection.Assembly})">
            <summary>
            Add other assemblies that Dapper Extensions will search if a mapping is not found in the same assembly of the POCO.
            </summary>
            <param name="assemblies"></param>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Configure(DapperExtensions.IDapperExtensionsConfiguration)">
            <summary>
            Configure DapperExtensions extension methods.
            </summary>
            <param name="defaultMapper"></param>
            <param name="mappingAssemblies"></param>
            <param name="sqlDialect"></param>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Configure(System.Type,System.Collections.Generic.IList{System.Reflection.Assembly},DapperExtensions.Sql.ISqlDialect)">
            <summary>
            Configure DapperExtensions extension methods.
            </summary>
            <param name="defaultMapper"></param>
            <param name="mappingAssemblies"></param>
            <param name="sqlDialect"></param>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query for the specified id, returning the data typed as per T
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Insert``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an insert query for the specified entity, returning the primary key.  
            If the entity has a single key, just the value is returned.  
            If the entity has a composite key, an IDictionary&lt;string, object&gt; is returned with the key values.
            The key value for the entity will also be updated if the KeyType is a Guid or Identity.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes an update query for the specified entity.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query for the specified entity.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Delete``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a delete query using the specified predicate.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetList``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperExtensions.ISort},System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetPage``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperExtensions.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified page and resultsPerPage.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetSet``1(System.Data.IDbConnection,System.Object,System.Collections.Generic.IList{DapperExtensions.ISort},System.Int32,System.Int32,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Executes a select query using the specified predicate, returning an IEnumerable data typed as per T.
            Data returned is dependent upon the specified firstResult and maxResults.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.Count``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a query using the specified predicate, returning an integer that represents the number of rows that match the query.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetMultiple(System.Data.IDbConnection,DapperExtensions.GetMultiplePredicate,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Executes a select query for multiple objects, returning IMultipleResultReader for each predicate.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetMap``1">
            <summary>
            Gets the appropriate mapper for the specified type T. 
            If the mapper for the type is not yet created, a new mapper is generated from the mapper type specifed by DefaultMapper.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.ClearCache">
            <summary>
            Clears the ClassMappers for each type.
            </summary>
        </member>
        <member name="M:DapperExtensions.DapperExtensions.GetNextGuid">
            <summary>
            Generates a COMB Guid which solves the fragmented index issue.
            See: http://davybrion.com/blog/2009/05/using-the-guidcomb-identifier-strategy
            </summary>
        </member>
        <!-- 对于成员“P:DapperExtensions.DapperExtensions.DefaultMapper”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“P:DapperExtensions.DapperExtensions.SqlDialect”忽略有格式错误的 XML 注释 -->
        <member name="P:DapperExtensions.DapperExtensions.InstanceFactory">
            <summary>
            Get or sets the Dapper Extensions Implementation Factory.
            </summary>
        </member>
        <member name="P:DapperExtensions.DapperExtensions.Instance">
            <summary>
            Gets the Dapper Extensions Implementation
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.AutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys.
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.ClassMapper`1">
            <summary>
            Maps an entity to a table through a collection of property maps.
            </summary>
        </member>
        <member name="M:DapperExtensions.Mapper.ClassMapper`1.Map(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="M:DapperExtensions.Mapper.ClassMapper`1.Map(System.Reflection.PropertyInfo)">
            <summary>
            Fluently, maps an entity property to a column
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.ClassMapper`1.SchemaName">
            <summary>
            Gets or sets the schema to use when referring to the corresponding table name in the database.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.ClassMapper`1.TableName">
            <summary>
            Gets or sets the table to use in the database.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.ClassMapper`1.Properties">
            <summary>
            A collection of properties that will map to columns in the database table.
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.PluralizedAutoClassMapper`1">
            <summary>
            Automatically maps an entity to a table using a combination of reflection and naming conventions for keys. 
            Identical to AutoClassMapper, but attempts to pluralize table names automatically.
            Example: Person entity maps to People table
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.IPropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database.
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.PropertyMap">
            <summary>
            Maps an entity property to its corresponding column in the database. 映射一个实体属性到它相应的数据库列
            </summary>
        </member>
        <member name="M:DapperExtensions.Mapper.PropertyMap.Column(System.String)">
            <summary>
            Fluently sets the column name for the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:DapperExtensions.Mapper.PropertyMap.Key(DapperExtensions.Mapper.KeyType)">
            <summary>
            Fluently sets the key type of the property.
            </summary>
            <param name="columnName">The column name as it exists in the database.</param>
        </member>
        <member name="M:DapperExtensions.Mapper.PropertyMap.Ignore">
            <summary>
            Fluently sets the ignore status of the property.
            </summary>
        </member>
        <member name="M:DapperExtensions.Mapper.PropertyMap.ReadOnly">
            <summary>
            Fluently sets the read-only status of the property.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.Name">
            <summary>
            Gets the name of the property by using the specified propertyInfo.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.ColumnName">
            <summary>
            Gets the column name for the current property.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.KeyType">
            <summary>
            Gets the key type for the current property.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.Ignored">
            <summary>
            Gets the ignore status of the current property. If ignored, the current property will not be included in queries.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.IsReadOnly">
            <summary>
            Gets the read-only status of the current property. If read-only, the current property will not be included in INSERT and UPDATE queries.
            </summary>
        </member>
        <member name="P:DapperExtensions.Mapper.PropertyMap.PropertyInfo">
            <summary>
            Gets the property info for the current property.
            </summary>
        </member>
        <member name="T:DapperExtensions.Mapper.KeyType">
            <summary>
            Used by ClassMapper to determine which entity property represents the key.
            </summary>
        </member>
        <member name="F:DapperExtensions.Mapper.KeyType.NotAKey">
            <summary>
            The property is not a key and is not automatically managed.
            </summary>
        </member>
        <member name="F:DapperExtensions.Mapper.KeyType.Identity">
            <summary>
            The property is an integery-based identity generated from the database.
            </summary>
        </member>
        <member name="F:DapperExtensions.Mapper.KeyType.Guid">
            <summary>
            The property is a Guid identity which is automatically managed.
            </summary>
        </member>
        <member name="F:DapperExtensions.Mapper.KeyType.Assigned">
            <summary>
            The property is a key that is not automatically managed. 是分配的
            </summary>
        </member>
        <member name="M:DapperExtensions.Predicates.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperExtensions.Operator,System.Object,System.Boolean)">
            <summary>
            Factory method that creates a new IFieldPredicate predicate: [FieldName] [Operator] [Value]. 
            Example: WHERE FirstName = 'Foo'
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName].</param>
            <param name="op">The comparison operator.</param>
            <param name="value">The value for the predicate.</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; 'Foo'.</param>
            <returns>An instance of IFieldPredicate. 字段判断实例</returns>
        </member>
        <member name="M:DapperExtensions.Predicates.Property``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperExtensions.Operator,System.Linq.Expressions.Expression{System.Func{``1,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new IPropertyPredicate predicate: [FieldName1] [Operator] [FieldName2]
            Example: WHERE FirstName = LastName
            </summary>
            <typeparam name="T">The type of the entity for the left operand.</typeparam>
            <typeparam name="T2">The type of the entity for the right operand.</typeparam>
            <param name="expression">An expression that returns the left operand [FieldName1].</param>
            <param name="op">The comparison operator.</param>
            <param name="expression2">An expression that returns the right operand [FieldName2].</param>
            <param name="not">Effectively inverts the comparison operator. Example: WHERE FirstName &lt;&gt; LastName </param>
            <returns>An instance of IPropertyPredicate.</returns>
        </member>
        <member name="M:DapperExtensions.Predicates.Group(DapperExtensions.GroupOperator,DapperExtensions.IPredicate[])">
            <summary>
            Factory method that creates a new IPredicateGroup predicate.
            Predicate groups can be joined together with other predicate groups.
            </summary>
            <param name="op">The grouping operator to use when joining the predicates (AND / OR).</param>
            <param name="predicate">A list of predicates to group.</param>
            <returns>An instance of IPredicateGroup.</returns>
        </member>
        <member name="M:DapperExtensions.Predicates.Exists``1(DapperExtensions.IPredicate,System.Boolean)">
            <summary>
            Factory method that creates a new IExistsPredicate predicate.
            </summary>
        </member>
        <member name="M:DapperExtensions.Predicates.Between``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},DapperExtensions.BetweenValues,System.Boolean)">
            <summary>
            Factory method that creates a new IBetweenPredicate predicate. 
            </summary>
        </member>
        <member name="M:DapperExtensions.Predicates.Sort``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)">
            <summary>
            Factory method that creates a new Sort which controls how the results will be sorted.
            </summary>
        </member>
        <member name="T:DapperExtensions.Operator">
            <summary>
            Comparison operator for predicates.
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Eq">
            <summary>
            Equal to
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Gt">
            <summary>
            Greater than
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Ge">
            <summary>
            Greater than or equal to
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Lt">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Le">
            <summary>
            Less than or equal to
            </summary>
        </member>
        <member name="F:DapperExtensions.Operator.Like">
            <summary>
            Like (You can use % in the value to do wilcard searching)
            </summary>
        </member>
        <member name="T:DapperExtensions.PredicateGroup">
            <summary>
            Groups IPredicates together using the specified group operator.
            </summary>
        </member>
        <member name="T:DapperExtensions.GroupOperator">
            <summary>
            Operator to use when joining predicates in a PredicateGroup.
            </summary>
        </member>
        <member name="M:DapperExtensions.Sql.SqlDialectBase.GetTableName(System.String,System.String,System.String)">
            <summary>
            获得表名
            </summary>
            <param name="schemaName">框架名</param>
            <param name="tableName">表名</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:DapperExtensions.Sql.SqlDialectBase.GetColumnName(System.String,System.String,System.String)">
            <summary>
            获得列名
            </summary>
            <param name="prefix">前缀</param>
            <param name="columnName">列名</param>
            <param name="alias">别名</param>
            <returns></returns>
        </member>
        <member name="M:DapperExtensions.Sql.SqlDialectBase.QuoteString(System.String)">
            <summary>
            引用字符串，即[]包围
            </summary>
        </member>
        <member name="M:DapperExtensions.Sql.SqlDialectBase.UnQuoteString(System.String)">
            <summary>
            无引用字符串
            </summary>
        </member>
        <member name="T:Dapper.SqlBuilder">
            <summary>
            sql构造者
            </summary>
        </member>
        <member name="M:Dapper.SqlBuilder.AddTemplate(System.String,System.Object)">
            <summary>
            添加模板
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlBuilder.AddClause(System.String,System.String,System.Object,System.String,System.String,System.String,System.Boolean)">
            <summary>
            添加子句
            </summary>
            <param name="name"></param>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="joiner"></param>
            <param name="prefix">前缀</param>
            <param name="postfix">后缀</param>
            <param name="IsInclusive">是否包含</param>
        </member>
        <member name="T:Dapper.SqlBuilder.Clauses">
            <summary>
            子句类
            </summary>
        </member>
        <member name="M:Dapper.SqlBuilder.Clauses.ResolveClauses(Dapper.DynamicParameters)">
            <summary>
            解决子句
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.SqlBuilder.Template">
            <summary>
            模板类
            </summary>
        </member>
        <member name="M:Dapper.SqlBuilder.Template.ResolveSql">
            <summary>
            解决sql语句
            </summary>
        </member>
        <member name="T:Dapper.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dapper.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dapper.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="M:Dapper.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dapper.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dapper.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler(System.Type,Dapper.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandlerImpl(System.Type,Dapper.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AddTypeHandler``1(Dapper.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.Execute(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dapper.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dapper.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ReplaceLiterals(Dapper.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.CreateParamInfoGenerator(Dapper.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeMap(System.Type,Dapper.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="E:Dapper.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dapper.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dapper.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dapper.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.SqlMapper.Identity.Equals(Dapper.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:Dapper.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dapper.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="P:Dapper.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="T:Dapper.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dapper.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="size"></param>
        </member>
        <member name="M:Dapper.DynamicParameters.AddParameters(System.Data.IDbCommand,Dapper.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="M:Dapper.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dapper.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="P:Dapper.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="P:Dapper.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="T:Dapper.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dapper.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dapper.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:Dapper.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dapper.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="M:Dapper.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="P:Dapper.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dapper.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dapper.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dapper.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="T:Dapper.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dapper.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Dapper.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dapper.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dapper.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dapper.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dapper.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dapper.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dapper.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dapper.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Dapper.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dapper.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dapper.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Dapper.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:XXF.Db.DbAreaRule">
            <summary>
            分区规则
            </summary>
        </member>
        <member name="M:XXF.Db.DbAreaRule.ShopAreaPartitionRule(System.String,System.Int32)">
            <summary>
            获取商户地区分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="dqbm">地区编码（邮政编码）</param>
            <returns>返回连接字符串</returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.ShopAreaPartitionRule(System.String,System.String)">
            <summary>
            获取商户地区分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="dqbm">商户账号</param>
            <returns>返回连接字符串</returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.ShopAreaPartitionRuleList(System.String)">
            <summary>
            所有商户分区的链接 
            </summary>
            <param name="connectstringTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.ShzhToPartitionNo(System.String)">
            <summary>
            商户账号取分区号
            </summary>
            <param name="shzh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.TidToPartitionNo(System.Int64)">
            <summary>
            根据订单id获取分区号
            </summary>
            <param name="tid"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.UserAreaPartitionRule(System.String,System.Int64)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="userid">用户自增id</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.UserAreaPartitionRule(System.String,System.String)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="id">userareaid,第几个userarea库</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.UserAreaPartitionRuleList(System.String)">
            <summary>
            所有商户分区的链接 
            </summary>
            <param name="connectstringTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.ReplaceConnectStringTemplate(System.String,XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model)">
            <summary>
            根据模板替换连接字符串
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbAreaRule.MonthTable(System.DateTime)">
            <summary>
            按月分表规则
            返回:_+yyyMM 举例:_201407
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbCatch">
            <summary>
            Db访问拦截 车毅
            </summary>
        </member>
        <member name="M:XXF.Db.DbCatch.Catch``1(System.Boolean,System.String,System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter},System.Func{``0})">
            <summary>
            错误拦截
            </summary>
            <typeparam name="T"></typeparam>
            <param name="istimeWatch"></param>
            <param name="sql"></param>
            <param name="procedurePar"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbConfig">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="M:XXF.Db.DbConfig.GetConfig(System.String)">
            <summary>取得配置信息</summary>
            <param name="Name">配置名称</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConfig.CreateConn">
            <summary>创建数据库连接</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConfig.CreateConn(XXF.Db.DbType,System.String)">
            <summary>创建数据库连接</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConfig.CreateConn(System.String)">
            <summary>创建数据库连接</summary>
            <returns></returns>
        </member>
        <member name="P:XXF.Db.DbConfig.DbType">
            <summary>数据库类型</summary>
        </member>
        <member name="P:XXF.Db.DbConfig.ConnectionString">
            <summary>连接字符串</summary>
        </member>
        <member name="T:XXF.Db.DbConn">
            <summary>数据库连接类</summary>
        </member>
        <member name="F:XXF.Db.DbConn._conn">
            <summary>数据库连接内部字段</summary>
        </member>
        <member name="F:XXF.Db.DbConn._dbtype">
            <summary>数据库类型</summary>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConn(System.String)">
            <summary>
            创建连接
            </summary>
            <param name="connectionString">数据库类型:默认sqlserver</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConn(XXF.Db.DbType)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConn(XXF.Db.DbType,System.String)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConn(XXF.Db.DbType,System.String,System.String,System.String,System.String)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="AServerName">服务器名称</param>
            <param name="ADatabaseName">数据库名称</param>
            <param name="ALoginName">用户</param>
            <param name="ALoginPass">密码</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConn(XXF.Db.DbType,System.Data.Common.DbConnection)">
            <summary>创建连接</summary>
            <param name="dbtype">数据库类型</param>
            <param name="ACn">已有的连接</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.CreateConnString(XXF.Db.DbType,System.String,System.String,System.String,System.String)">
            <summary>取得数据库连接字符串(SQL传所有参数、ORACLE传AServerName ALoginName ALoginPass、ACCESS传ADatabaseName ALoginPass)</summary>
            <param name="dbtype">数据库类型</param>
            <param name="AServerName">服务器名</param>
            <param name="ADatabaseName">数据库名</param>
            <param name="ALoginName">用户</param>
            <param name="ALoginPass">密码</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.TypeToFieldType(System.Type)">
            <summary>将DataSet中列的类型转换为DataField类型</summary>
            <param name="AType">原类型，一般取自DataSet.Table.Columns</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.Open">
            <summary>打开数据库连接
            </summary>
        </member>
        <member name="M:XXF.Db.DbConn.Close">
            <summary>关闭数据库连接
            </summary>
        </member>
        <member name="M:XXF.Db.DbConn.Dispose">
            <summary>释放
            </summary>
        </member>
        <member name="M:XXF.Db.DbConn.GetConnection">
            <summary>取得数据库连接对象</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.ExecuteSql(System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>执行SQL语句</summary>
            <param name="Sql">查询语句</param>
        </member>
        <member name="M:XXF.Db.DbConn.ExecuteScalar(System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>执行SQL语句</summary>
            <param name="Sql">查询语句</param>
        </member>
        <member name="M:XXF.Db.DbConn.SqlBulkCopy(System.Data.DataTable,System.String,System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter},System.Int32)">
            <summary>执行SQL语句</summary>
            <param name="Sql">查询语句</param>
        </member>
        <member name="M:XXF.Db.DbConn.SqlToDataTable(System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>
            扩展支持返回datatable 车毅
            </summary>
            <param name="Sql"></param>
            <param name="ProcedurePar"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.BeginTransaction">
            <summary>启动事务</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.Commit">
            <summary>提交事务
            </summary>
        </member>
        <member name="M:XXF.Db.DbConn.Rollback">
            <summary>回滚事务
            </summary>
        </member>
        <member name="M:XXF.Db.DbConn.GetTransaction">
            <summary>取得事务对象</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.SqlToDataSet(System.Data.DataSet,System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>用SQL语句返回记录集</summary>
            <param name="ds">记录集</param>
            <param name="Sql">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.SqlToDataSet(System.Data.DataSet,System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter},System.String)">
            <summary>用SQL语句返回记录集</summary>
            <param name="ds">记录集</param>
            <param name="Sql">SQL语句</param>
            <param name="TableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.ExecuteSql(System.String,System.Data.CommandType,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>执行SQL语句</summary>
            <param name="Sql">查询语句</param>
            <param name="CmdType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.ExecuteScalar(System.String,System.Data.CommandType,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>执行SQL语句</summary>
            <param name="Sql">查询语句</param>
            <param name="CmdType">命令类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.ExecuteProcedure(System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>执行SQL语句</summary>
            <param name="ProcedureName">存储过程名称</param>
            <param name="ProcedurePar">参数</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.SqlToDbReader(System.String,System.Collections.Generic.List{XXF.Db.ProcedureParameter})">
            <summary>用SQL语句返回DataReader</summary>
            <param name="Sql"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.GetIdentity">
            <summary>取得刚刚插入数据库的种子序号</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.GetServerDate">
            <summary>取得系统时间</summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.TableIsExist(System.String)">
            <summary>数据库中表是否存在</summary>
            <param name="aTableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.TableIsExist(System.String,System.String)">
            <summary>数据库中表是否存在</summary>
            <param name="aDbName">数据库名</param>
            <param name="aTableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.FieldIsExist(System.String,System.String)">
            <summary>表中字段是否存在</summary>
            <param name="aTableName">表名</param>
            <param name="aFieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.FieldIsExist(System.String,System.String,System.String)">
            <summary>表中字段是否存在</summary>
            <param name="aDbName">数据库名</param>
            <param name="aTableName">表名</param>
            <param name="aFieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbConn.GetMcsToSql(System.String,System.String,System.Int32,System.Collections.Generic.List{XXF.Db.ProcedureParameter}@)">
            <summary>从多选字符串MultiChoiceStr转换成Sql条件</summary>
            <param name="AMultiChoiceStr">多选字符串</param>
            <param name="aField">字段</param>
            <param name="aStyle">类型 0-两边都不加  1-%左边加  2-右边加%  3-%两边加%</param>
            <param name="aPar">返回参数</param>
            <returns></returns>
        </member>
        <member name="P:XXF.Db.DbConn.IsWatchTime">
            <summary>
            是否监控sql耗时
            </summary>
        </member>
        <member name="P:XXF.Db.DbConn.DbType">
            <summary>数据库类型
            </summary>
        </member>
        <member name="P:XXF.Db.DbConn.ConnString">
            <summary>连接字符串
            </summary>
        </member>
        <member name="M:XXF.Db.DbConnSql.ParameterTransform(XXF.Db.ProcedureParameter)">
            <summary>参数类型转化</summary>
            <param name="Par"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbPartitionConfig.DbPartitionConfigHelper">
            <summary>
            Db分区配置帮助类
            </summary>
        </member>
        <member name="M:XXF.Db.DbPartitionConfig.DbPartitionConfigHelper.RefreshData(System.DateTime)">
            <summary>
            刷新数据从数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbPartitionConfig.DbPartitionConfigHelper.RefreshDataByLocalFile(System.Collections.Generic.List{XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model})">
            <summary>
            刷新数据从本地文件
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbPartitionConfig.DbPartitionConfigHelper.GetDicKey(System.String)">
            <summary>
            得到key值
            </summary>
            <param name="key"></param>
            <param name="dqbm"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbPartitionConfig.DbPartitionConfigHelper.GetCacheConfig">
            <summary>
            获取缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbPartitionConfig.Model.EnumPartitionType">
            <summary>
            库分区类型枚举
            </summary>
        </member>
        <member name="F:XXF.Db.DbPartitionConfig.Model.EnumPartitionType.shop">
            <summary>
            商户库
            </summary>
        </member>
        <member name="F:XXF.Db.DbPartitionConfig.Model.EnumPartitionType.user">
            <summary>
            用户库
            </summary>
        </member>
        <member name="T:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model">
            <summary>
            tb_dbpartition_config Data Structure.
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.id">
            <summary>
            自增
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.partitionno">
            <summary>
            分区id（分区标识号）
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.partitiontype">
            <summary>
            分区类型(1:用户分区,2:商户表分区)
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.dbserver">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.dbname">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.dbuser">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.dbpass">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.lastUpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="P:XXF.Db.DbPartitionConfig.Model.tb_dbpartition_config_model.isDel">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:XXF.Db.DbShuntConnRule">
            <summary>
            数据库分流（数据库负载均衡）规则
            </summary>
        </member>
        <member name="M:XXF.Db.DbShuntConnRule.UserAreaPartitionRule(System.String,System.String,System.String)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="userid">用户自增id</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntConnRule.UserAreaPartitionRule(System.String,System.String,System.Int32)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="userid">用户自增id</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntConnRule.ShzhToPartitionNo(System.String)">
            <summary>
            商户账号转分区号
            </summary>
            <param name="shzh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntConnRule.ReplaceConnectStringTemplate(System.String,XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model)">
            <summary>
            根据连接字符串模板替换连接字符串
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbShuntRuleConnConfig.DbShuntRuleConnConfigHelper">
            <summary>
            Db分区配置帮助类
            </summary>
        </member>
        <member name="M:XXF.Db.DbShuntRuleConnConfig.DbShuntRuleConnConfigHelper.RefreshData(System.DateTime)">
            <summary>
            刷新数据从数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntRuleConnConfig.DbShuntRuleConnConfigHelper.RefreshDataByLocalFile(System.Collections.Generic.List{XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model})">
            <summary>
            刷新数据从本地文件
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntRuleConnConfig.DbShuntRuleConnConfigHelper.GetDicKey(System.String)">
            <summary>
            得到key值
            </summary>
            <param name="key"></param>
            <param name="dqbm"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbShuntRuleConnConfig.DbShuntRuleConnConfigHelper.GetCacheConfig">
            <summary>
            获取缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model">
            <summary>
            tb_dbshuntruleconn_config Data Structure.
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.id">
            <summary>
            自增
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.partitionno">
            <summary>
            分区id（分区标识号）
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.regioncode">
            <summary>
            地区编码
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.dbserver">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.dbname">
            <summary>
            数据库名
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.dbuser">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.dbpass">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.lastUpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="P:XXF.Db.DbShuntRuleConnConfig.Model.tb_shuntruleconn_config_model.isDel">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:XXF.Db.DbSubscribeRule">
            <summary>
            数据库订阅规则
            </summary>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.GetMainConnection(System.String,System.Int32)">
            <summary>
            获取主库订阅库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.GetConfigConnection(System.String,System.Int32)">
            <summary>
            获取配置库订阅库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.GetYzmConnection(System.String,System.Int32)">
            <summary>
            获取验证码订阅库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.GetCrmdyConnection(System.String,System.Int32)">
            <summary>
            获取crm订阅库的订阅库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.GetLogConnection(System.String,System.Int32)">
            <summary>
            获取日志库订阅库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.ShopAreaPartitionRule(System.String,System.Int32,System.Int32)">
            <summary>
            获取商户地区分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="dqbm">地区编码（邮政编码）</param>
            <returns>返回连接字符串</returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.ShopAreaPartitionRule(System.String,System.String,System.Int32)">
            <summary>
            获取商户地区分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="dqbm">商户账号</param>
            <returns>返回连接字符串</returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.ShopAreaPartitionRuleList(System.String,System.Int32)">
            <summary>
            所有商户分区的链接 
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="subscribeType"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.ShzhToPartitionNo(System.String)">
            <summary>
            根据商户账号获取分区号
            </summary>
            <param name="shzh"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.TidToPartitionNo(System.Int64)">
            <summary>
            根据订单id获取分区号
            </summary>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.UserAreaPartitionRule(System.String,System.Int32)">
            <summary>
            获取用户分区规则 汇总库
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="subscribeType">订阅库类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.UserAreaPartitionRule(System.String,System.Int64,System.Int32)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="userid">用户自增id</param>
            <param name="subscribeType">订阅库类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.UserAreaPartitionRule(System.String,System.String,System.Int32)">
            <summary>
            获取用户分区规则
            默认{PartitionNo}，被替换成分区编号
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="dqbm">地区编码</param>
            <param name="subscribeType">订阅库类型</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.UserAreaPartitionRuleList(System.String,System.Int32)">
            <summary>
            所有用户分区的链接 去除汇总库
            </summary>
            <param name="connectstringTemplate"></param>
            <param name="subscribeType"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRule.ReplaceConnectStringTemplate(System.String,XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model)">
            <summary>
            根据连接字符串模板获取连接字符串
            </summary>
        </member>
        <member name="M:XXF.Db.DbSubscribeRuleConfig.DbSubscribeRuleConfigHelper.RefreshData(System.DateTime)">
            <summary>
            刷新数据从数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRuleConfig.DbSubscribeRuleConfigHelper.RefreshDataByLocalFile(System.Collections.Generic.List{XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model})">
            <summary>
            刷新数据从本地文件
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRuleConfig.DbSubscribeRuleConfigHelper.GetDicKey(System.String)">
            <summary>
            得到key值
            </summary>
            <param name="key"></param>
            <param name="dqbm"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.DbSubscribeRuleConfig.DbSubscribeRuleConfigHelper.GetCacheConfig">
            <summary>
            获取缓存
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbSubscribeRuleConfig.Model.EnumSubscribeType">
            <summary>
            订阅库类型
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumSubscribeType.Stage">
            <summary>
            订阅库类型 Stage订阅
            </summary>
        </member>
        <member name="T:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType">
            <summary>
            库类型枚举
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.shop">
            <summary>
            商户库
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.user">
            <summary>
            用户库
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.main">
            <summary>
            主库
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.crmdy">
            <summary>
            crm订阅库
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.yzm">
             <summary>
            验证码库 
             </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.log">
            <summary>
            日志表
            </summary>
        </member>
        <member name="F:XXF.Db.DbSubscribeRuleConfig.Model.EnumPartitionType.config">
            <summary>
            config库
            </summary>
        </member>
        <member name="T:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model">
            <summary>
            tb_dbsubscribe_config Data Structure.
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.partitionno">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.partitiontype">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.dbserver">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.dbname">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.dbuser">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.dbpass">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.dbtype">
            <summary>
            
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.lastUpdateTime">
            <summary>
            最后更新时间
            </summary>
        </member>
        <member name="P:XXF.Db.DbSubscribeRuleConfig.Model.tb_dbsubscribe_config_model.isDel">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:XXF.Db.FinaceDate">
            <summary>账期类,其实就是YYYYMM格式的日期</summary>
        </member>
        <member name="M:XXF.Db.FinaceDate.#ctor(System.String)">
            <summary>构造函数，参数必须为YYYYMM格式</summary>
            <param name="aStr"></param>
        </member>
        <member name="M:XXF.Db.FinaceDate.#ctor(System.DateTime)">
            <summary>构造函数</summary>
            <param name="aDate"></param>
        </member>
        <member name="M:XXF.Db.FinaceDate.#ctor(System.Int32,System.Int32)">
            <summary>构造函数</summary>
            <param name="aYear">年</param>
            <param name="aMonth">月</param>
        </member>
        <member name="M:XXF.Db.FinaceDate.AddMonth(System.Int32)">
            <summary>将指定的月份加到此实例上</summary>
            <param name="months">月份数，months参数可以是正数也可以是负数</param>
        </member>
        <member name="M:XXF.Db.FinaceDate.Equal(XXF.Db.FinaceDate)">
            <summary>判断参数中的实例和当前实例是否相等</summary>
            <param name="aDate"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.FinaceDate.Compare(XXF.Db.FinaceDate)">
            <summary>将参数中值与此实例做比较，实例大返回正数，参数大返回负数</summary>
            <param name="aDate">用来做比较的对象</param>
            <returns>实例大返回正数，参数大返回负数</returns>
        </member>
        <member name="M:XXF.Db.FinaceDate.Compare(System.DateTime)">
            <summary>将参数中值与此实例做比较，实例大返回正数，参数大返回负数</summary>
            <param name="aDate">用来做比较的对象</param>
            <returns>实例大返回正数，参数大返回负数</returns>
        </member>
        <member name="P:XXF.Db.FinaceDate.Year">
            <summary>获取或设置此实例的年份</summary>
        </member>
        <member name="P:XXF.Db.FinaceDate.Month">
            <summary>获取或设置此实例的月份</summary>
        </member>
        <member name="P:XXF.Db.FinaceDate.Value">
            <summary>获取账期字符串YYYYMM格式</summary>
        </member>
        <member name="P:XXF.Db.FinaceDate.CnValue">
            <summary>获取账期字符串[yyyy年MM月]格式</summary>
        </member>
        <member name="T:XXF.Db.LibConvert">
            <summary>
            类型转换类
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.IsDbNull(System.Object)">
            <summary>返回有关指定对象是否为 System.TypeCode.DBNull 类型的指示。</summary>
            <param name="Obj">一个对象</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.DateTimeToInt(System.DateTime)">
            <summary>日期型转整型</summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.IntToDateTime(System.Int64)">
            <summary>整型转日期型</summary>
            <param name="Seconds"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToShort(System.String)">
            <summary>【通用函数】string类型转换为short类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToInt(System.String)">
            <summary>【通用函数】string类型转换为int类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToInt64(System.String)">
            <summary>【通用函数】string类型转换为Tnt64类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToDouble(System.String)">
            <summary>【通用函数】string类型转换为double类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToFloat(System.String)">
            <summary>【通用函数】string类型转换为float类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToDecimal(System.String)">
            <summary>【通用函数】string类型转换为decimal类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToDateTime(System.String)">
            <summary>【通用函数】string类型转换为日期类型,转换失败返回DateTime.Now
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToBoolean(System.String)">
            <summary>【通用函数】string类型转换为BOOL类型,转换失败返回False
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToDateTime(System.String,System.DateTime)">
            <summary>【通用函数】string类型转换为日期类型
            </summary>
            <param name="aStr">要转换的字符串</param>
            <param name="aDefault">如果转换失败的默认值</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.IntToBool(System.Int32)">
            <summary>【通用函数】int类型转换为bool类型(1为TRUE，其余为FALSE)
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.BoolToInt(System.Boolean)">
            <summary>【通用函数】bool类型转换为int类型(TRUE为1，FALSE为0)
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToShort(System.Object)">
            <summary>【通用函数】object类型转换为short类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToInt(System.Object)">
            <summary>【通用函数】object类型转换为int类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToInt64(System.Object)">
            <summary>【通用函数】object类型转换为Int64类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToDouble(System.Object)">
            <summary>【通用函数】object类型转换为double类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToDecimal(System.Object)">
            <summary>【通用函数】object类型转换为decimal类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToFloat(System.Object)">
            <summary>【通用函数】object类型转换为float类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToDateTime(System.Object)">
            <summary>【通用函数】object类型转换为datetime类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToBool(System.Object)">
            <summary>【通用函数】object类型转换为bool类型，直接强制转换(bool)aObj
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.NullToStr(System.Object)">
            <summary>【通用函数】object类型转换为string类型
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToStr(System.Object)">
            <summary>【通用函数】相当于NullToStr
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.MoneyToUpper(System.Double,System.Boolean)">
            <summary>【通用函数】金额小写转换成大写</summary>
            <param name="Value">数字</param>
            <param name="AState">状态，true表示完整，false表示简写</param>
            <returns>返回字符串，如：叁佰贰拾伍元整</returns>
        </member>
        <member name="M:XXF.Db.LibConvert.MoneyBitUpper(System.Double,System.Int32)">
            <summary>【通用函数】取得金额某位的大写</summary>
            <param name="Value">数字</param>
            <param name="B">位置，-2分-1角0元1十2百3千4万，以此类推</param>
            <returns>返回数字，如：贰</returns>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToBytes(System.Object)">
            <summary>【通用函数】对象转换成字节数组,自动判断isDbNull,返回null
            </summary>
            <param name="obj">对象</param>
            <returns>失败返回null</returns>
        </member>
        <member name="M:XXF.Db.LibConvert.BytesToObj(System.Byte[])">
            <summary>
            【通用函数】字节数组转换成对象,自动判断isDbNull,返回null
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.ImageToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>【通用函数】图片转换为字节数组
            </summary>
            <param name="image">图片</param>
            <param name="format">图片格式，一般用ImageFormat.Jpeg</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.ImageToBytes(System.Drawing.Image)">
            <summary>【通用函数】图片转换为字节数组
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.BytesToImage(System.Byte[])">
            <summary>【通用函数】字节数组转换为图片
            </summary>
            <param name="bytes">字节数组</param>
            <returns>失败返回null</returns>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToBytesToImage(System.Object)">
            <summary>【通用函数】对象转换成字节数组转换为图片,自动判断isDbNull
            </summary>
            <param name="obj">对象</param>
            <returns>失败返回null</returns>
        </member>
        <member name="M:XXF.Db.LibConvert.StrToBytes(System.String)">
            <summary>【通用函数】字符串转换成字节数组(采用UTF8)</summary>
            <param name="Str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.BytesToStr(System.Byte[])">
            <summary>【通用函数】字节数组转换成字符串(采用UTF8)（过期函数，建议采用ObjToBytesToStr）</summary>
            <param name="bytes">字节数组，DataSet返回的数据可以直接使用,如:(byte[])Ds.Tables[0].Rows[0]["f_fromsql"]</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.ObjToBytesToStr(System.Object)">
            <summary>【通用函数】对象转换成字节数组再转换成字符串(采用UTF8)</summary>
            <param name="Obj">对象,如:Ds.Tables[0].Rows[0]["f_image"]</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.DatasetToXmlstr(System.Data.DataSet)">
            <summary>【通用函数】将Dataset对象转换成Xml字符串(采用UTF8)</summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.XmlstrToDataset(System.String)">
            <summary>【通用函数】将Xml字符串转换成Dataset对象(采用UTF8)</summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibConvert.DupeString(System.String,System.Int32)">
            <summary>【通用函数】填冲c字符n次
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.LeftStr(System.String,System.Int32)">
            <summary>【通用函数】取字符串左边N个字符
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.RightStr(System.String,System.Int32)">
            <summary>【通用函数】取字符串右边N个字符
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.GetLength(System.String)">
            <summary>【通用函数】取字符串长度(按字节计算)
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.BytesToByteStr(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>【通用函数】byte数组转16进制字符串，一个字节两个字母
            </summary>
        </member>
        <member name="M:XXF.Db.LibConvert.ToLongList(System.String[])">
            <summary>
            字符串数组转换为Long数组
            </summary>
            <param name="stringList">转换字符串数组</param>
            <returns>List{long}</returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.Old_EnCrypt(System.String)">
            <summary>MD5加密算法</summary>
            <param name="aStr"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.Old_EnCrypt(System.String,System.String)">
            <summary>MD5加密算法</summary>
            <param name="aStr"></param>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.Old_DeCrypt(System.String)">
            <summary>MD5解密算法</summary>
            <param name="aStr"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.Old_DeCrypt(System.String,System.String)">
            <summary>MD5解密算法</summary>
            <param name="aStr"></param>
            <param name="aKey"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.MD5(System.String)">
            <summary>返回md5算法32位小写</summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.En32MD5(System.String)">
            <summary>
            MD5加密 32位小写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.SHA1(System.String)">
            <summary>返回sha1算法小写字符串</summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.EnXor(System.String,System.Char)">
            <summary>异或加密</summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.DeXor(System.String,System.Char)">
            <summary>异或解密</summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.EnDES(System.String)">
            <summary>DES加密</summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.EnDES(System.String,System.String)">
            <summary>DES加密</summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.DeDES(System.String,System.String)">
            <summary>DES解密</summary>
            <param name="Source"></param>
            <param name="Key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.EnRijndael(System.String)">
            <summary>Rijndael加密</summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibCrypto.DeRijndael(System.String)">
            <summary>Rijndael解密</summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.Rijndael">
            <summary>对称加密算法</summary>
        </member>
        <member name="M:XXF.Db.Rijndael.#ctor">
            <summary>
            对称加密类的构造函数
            </summary>
        </member>
        <member name="M:XXF.Db.Rijndael.GetLegalKey">
            <summary>
            获得密钥
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:XXF.Db.Rijndael.GetLegalIV">
            <summary>
            获得初始向量IV
            </summary>
            <returns>初试向量IV</returns>
        </member>
        <member name="M:XXF.Db.Rijndael.Encrypto(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="Source">待加密的串</param>
            <returns>经过加密的串</returns>
        </member>
        <member name="M:XXF.Db.Rijndael.Decrypto(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="Source">待解密的串</param>
            <returns>经过解密的串</returns>
        </member>
        <member name="M:XXF.Db.LibNumeric.GetRandomNumeric(System.Int32,System.Int32)">
            <summary>【通用函数】取随机数字
            </summary>
            <param name="aMin">最小</param>
            <param name="aMax">最大</param>
        </member>
        <member name="M:XXF.Db.LibString.StrAddNumber(System.String,System.Int32)">
            <summary>字符串增加一个数字，一般用于编码递增</summary>
            <param name="Source">原字符串</param>
            <param name="Number">增加的数字</param>
            <returns>返回字符串</returns>
        </member>
        <member name="M:XXF.Db.LibString.DupeString(System.String,System.Int32)">
            <summary>【通用函数】填冲c字符n次
            </summary>
        </member>
        <member name="M:XXF.Db.LibString.LeftStr(System.String,System.Int32)">
            <summary>【通用函数】取字符串左边N个字符
            </summary>
        </member>
        <member name="M:XXF.Db.LibString.RightStr(System.String,System.Int32)">
            <summary>【通用函数】取字符串右边N个字符
            </summary>
        </member>
        <member name="M:XXF.Db.LibString.GetLength(System.String)">
            <summary>【通用函数】取字符串长度(按字节计算)
            </summary>
        </member>
        <member name="M:XXF.Db.LibString.IsDate(System.String)">
            <summary>【通用函数】验证日期字符串格式是否正确
            </summary>
        </member>
        <member name="M:XXF.Db.LibString.GetStringToBm(System.String,System.String)">
            <summary>【通用函数】提取字符串前的编码
            </summary>
            <param name="Str">原字符串</param>
            <param name="Split">间隔符</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibString.GetStringToMc(System.String,System.String)">
            <summary>【通用函数】提取字符串后面的名称
            </summary>
            <param name="Str">原字符串</param>
            <param name="Split">间隔符</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Db.LibString.GetChineseSpell(System.String)">
            <summary>获得一个字符串的汉语拼音码[南京 yyf]
            </summary>
            <param name="strText">字符串</param>
            <returns>汉语拼音码,该字符串只包含大写的英文字母</returns>
        </member>
        <member name="M:XXF.Db.LibString.MakeRandomNumber(System.Int32)">
            <summary>生成一个指定位数的随机数
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.SimpleProcedureParameter">
            <summary>
            简易参数写法 车毅
            简化并扩展原先的参数书写方式
            </summary>
        </member>
        <member name="M:XXF.Db.SimpleProcedureParameter.ToParameters">
            <summary>
            转化成框架支持的参数数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Db.DbType">
            <summary>数据库连接类型</summary>
        </member>
        <member name="F:XXF.Db.DbType.SQLSERVER">
            <summary>SQL SERVER数据库</summary>
        </member>
        <member name="F:XXF.Db.DbType.ORACLE">
            <summary>ORACLE数据库</summary>
        </member>
        <member name="F:XXF.Db.DbType.SQLITE">
            <summary>Sqlite数据库</summary>
        </member>
        <member name="F:XXF.Db.DbType.Other">
            <summary>其他数据库</summary>
        </member>
        <member name="T:XXF.Db.ProcParType">
            <summary>存储过程参数类型</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Default">
            <summary>
            默认无参 车毅
            </summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Int16">
            <summary>16位的有符号整数，相当于Sql中的SmallInt、Oracle中的Int16、Oledb中的SmallInt、.net中的System.Int16</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Int32">
            <summary>32位的有符号整数，相当于Sql中的Int、Oracle中的Int32、Oledb中的Integer、.net中的System.Int32</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Int64">
            <summary>64位的有符号整数，相当于Sql中的BigInt、Oracle中无此类型可用Number代替、Oledb中的BigInt、.net中的System.Int64</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Single">
            <summary>单精度浮点值，相当于Sql中的Real、Oracle中的Float、Oledb中的Single、.net中的System.Single</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Double">
            <summary>双精度浮点值，相当于Sql中的Float、Oracle中的Double、Oledb中的Double、.net中的System.Double</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Decimal">
            <summary>定点精度和小数位数数值，相当于Sql中的Decimal、Oracle中的Number、Oledb中的Decimal、.net中的System.Decimal</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Char">
            <summary>固定长度字符串，相当于Sql中的Char、Oracle中的Char、Oledb中的Char、.net中的System.String</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.VarChar">
            <summary>可变长度字符串，相当于Sql中的VarChar、Oracle中的VarChar、Oledb中的VarChar、.net中的System.String</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.NVarchar">
            <summary>双字节char</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.Image">
            <summary>二进制数据，相当于Sql中的Binary、Oracle中的Blob、Oledb中的Binary、.net中的System.Byte[]</summary>
        </member>
        <member name="F:XXF.Db.ProcParType.DateTime">
            <summary>日期时间类型，相当于Sql中的DateTime、Oracle中的DateTime、Oledb中的DBDate、.net中的System.DateTime</summary>
        </member>
        <member name="T:XXF.Db.FieldType">
            <summary>字段类型</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Int16">
            <summary>16位的有符号整数，相当于Sql中的SmallInt、Oracle中的Int16、Oledb中的SmallInt、.net中的System.Int16</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Int32">
            <summary>32位的有符号整数，相当于Sql中的Int、Oracle中的Int32、Oledb中的Integer、.net中的System.Int32</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Int64">
            <summary>64位的有符号整数，相当于Sql中的BigInt、Oracle中无此类型可用Number代替、Oledb中的BigInt、.net中的System.Int64</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Single">
            <summary>单精度浮点值，相当于Sql中的Real、Oracle中的Float、Oledb中的Single、.net中的System.Single</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Double">
            <summary>双精度浮点值，相当于Sql中的Float、Oracle中的Double、Oledb中的Double、.net中的System.Double</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Decimal">
            <summary>定点精度和小数位数数值，相当于Sql中的Decimal、Oracle中的Number、Oledb中的Decimal、.net中的System.Decimal</summary>
        </member>
        <member name="F:XXF.Db.FieldType.String">
            <summary>可变长度字符串，相当于Sql中的VarChar、Oracle中的VarChar、Oledb中的VarChar、.net中的System.String</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Image">
            <summary>二进制数据，相当于Sql中的Binary、Oracle中的Blob、Oledb中的Binary、.net中的System.Byte[]</summary>
        </member>
        <member name="F:XXF.Db.FieldType.DateTime">
            <summary>日期时间类型，相当于Sql中的DateTime、Oracle中的DateTime、Oledb中的DBDate、.net中的System.DateTime</summary>
        </member>
        <member name="F:XXF.Db.FieldType.Boolean">
            <summary>布尔值</summary>
        </member>
        <member name="T:XXF.Db.ProcedureParameter">
            <summary>存储过程参数</summary>
        </member>
        <member name="F:XXF.Db.ProcedureParameter.Name">
            <summary>参数名称</summary>
        </member>
        <member name="F:XXF.Db.ProcedureParameter.ParType">
            <summary>参数类型</summary>
        </member>
        <member name="F:XXF.Db.ProcedureParameter.Size">
            <summary>参数大小</summary>
        </member>
        <member name="F:XXF.Db.ProcedureParameter.Direction">
            <summary>参数方向</summary>
        </member>
        <member name="F:XXF.Db.ProcedureParameter.Value">
            <summary>参数值</summary>
        </member>
        <member name="M:XXF.Db.ProcedureParameter.#ctor">
            <summary>默认构造函数</summary>
        </member>
        <member name="M:XXF.Db.ProcedureParameter.#ctor(System.String,System.Byte[])">
            <summary>image型构造函数</summary>
            <param name="AName"></param>
            <param name="AImage"></param>
        </member>
        <member name="M:XXF.Db.ProcedureParameter.#ctor(System.String,XXF.Db.ProcParType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>构造函数</summary>
            <param name="_name">参数名称</param>
            <param name="_partype">参数类型</param>
            <param name="_size">参数大小</param>
            <param name="_direction">参数方向</param>
            <param name="_value">参数值</param>
        </member>
        <member name="M:XXF.Db.ProcedureParameter.#ctor(System.String,XXF.Db.ProcParType,System.Int32,System.Object)">
            <summary>构造函数</summary>
            <param name="_name">参数名称</param>
            <param name="_partype">参数类型</param>
            <param name="_size">参数大小</param>
            <param name="_direction">参数方向</param>
            <param name="_value">参数值</param>
        </member>
        <member name="M:XXF.Db.ProcedureParameter.#ctor(System.String,System.Object)">
            <summary>构造函数 车毅修改支持无类型参数</summary>
            <param name="_name">参数名称</param>
            <param name="_partype">参数类型</param>
            <param name="_size">参数大小</param>
            <param name="_direction">参数方向</param>
            <param name="_value">参数值</param>
        </member>
        <member name="T:XXF.Extensions.DBObjectMethodHelper">
            <summary>
            DB object对象的扩展方法
            </summary>
        </member>
        <member name="T:XXF.Extensions.RequestMethodHelper">
            <summary>
            Request(System.Web.HttpRequestBase)扩展类
            </summary>
        </member>
        <member name="M:XXF.Extensions.RequestMethodHelper.RequestParams(System.Web.HttpRequestBase)">
            <summary>
            请求参数Get,Post
            </summary>
            <param name="Request"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.RequestMethodHelper.RequestParams(System.Web.HttpRequest)">
            <summary>
            请求参数Get,Post
            </summary>
            <param name="Request"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.RequestMethodHelper.RequestParamValue(System.Web.HttpRequestBase,System.String)">
            <summary>
            获取请求参数值
            </summary>
            <param name="Request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.RequestMethodHelper.RequestParamValue(System.Web.HttpRequest,System.String)">
            <summary>
            获取请求参数值
            </summary>
            <param name="Request"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Extensions.StringMehtodHelper">
            <summary>
            字符串处理方法
            </summary>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.SubString3(System.String,System.Int32)">
            <summary>
            部分字符串获取
            </summary>
            <param name="str"></param>
            <param name="maxlen"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.SubString2(System.String,System.Int32)">
            <summary>
            部分字符串获取
            </summary>
            <param name="str"></param>
            <param name="maxlen"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.NullToEmpty(System.String)">
            <summary>
            如果string空引用转空内容
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.RemoveHtml(System.String)">
            <summary>
            去除html标签
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.RemoveMoreSpace(System.String)">
            <summary>
            去除2个以上的空格
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.CutString(System.String,System.Int32)">
            <summary>
            剪切字符串
            </summary>
            <param name="strInput"></param>
            <param name="intLen"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Extensions.StringMehtodHelper.EscapeJson(System.String)">
            <summary>
            json特殊字符处理
            </summary>
        </member>
        <member name="P:XXF.Log.CommonLogInfo.logtype">
            <summary>
            日志类型:一般非正常错误,系统级严重错误,一般业务日志,系统日志
            </summary>
        </member>
        <member name="P:XXF.Log.CommonLogInfo.logtag">
            <summary>
            日志唯一标示(简短的方法名或者url,便于归类)
            </summary>
        </member>
        <member name="T:XXF.Log.CommLog">
            <summary>
            一般日志记录类
            </summary>
        </member>
        <member name="M:XXF.Log.CommLog.Write(System.String)">
            <summary>
            日常一般日志记录
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XXF.Log.CommLog.Write(XXF.Log.CommonLogInfo)">
            <summary>
            日常一般日志记录
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:XXF.Log.ErrorLogInfo.logtype">
            <summary>
            日志类型:一般非正常错误,系统级严重错误
            </summary>
        </member>
        <member name="P:XXF.Log.ErrorLogInfo.logtag">
            <summary>
            日志唯一标示(简短的方法名或者url,便于归类)
            </summary>
        </member>
        <member name="P:XXF.Log.ErrorLogInfo.developer">
            <summary>
            相关开发人员
            </summary>
        </member>
        <member name="T:XXF.Log.ErrorLog">
            <summary>
            简易错误日志 车毅
            </summary>
        </member>
        <member name="M:XXF.Log.ErrorLog.Write(System.String,System.Exception)">
            <summary>
            错误日志记录
            </summary>
            <param name="errormsg"></param>
            <param name="msg"></param>
        </member>
        <member name="T:XXF.Log.ThreadLog">
            <summary>
            线程日志
            </summary>
        </member>
        <member name="M:XXF.Log.ThreadLog.Monitor">
            <summary>
            开启监控
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.logtype">
            <summary>
            耗时日志类型：普通日志=0，api接口日志=1，sql日志=2
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.logtag">
            <summary>
            日志标识,sql类型则为sql哈希 string.hash(),api类型则为url,普通日志则为方法名
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.url">
            <summary>
            当前url
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.msg">
            <summary>
            当前信息
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.fromip">
            <summary>
            来源ip(代码执行ip)
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.sqlip">
            <summary>
            sqlip地址
            </summary>
        </member>
        <member name="P:XXF.Log.TimeWatchLogInfo.remark">
            <summary>
            其他记录标记信息
            </summary>
        </member>
        <member name="T:XXF.Log.TimeWatchLog">
            <summary>
            简易耗时打印 车毅
            </summary>
        </member>
        <member name="M:XXF.Log.TimeWatchLog.Start">
            <summary>
            开启
            </summary>
        </member>
        <member name="M:XXF.Log.TimeWatchLog.Write(System.String)">
            <summary>
            写普通耗时日志(url哈希为logtag)
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XXF.Log.TimeWatchLog.Write(System.String,System.String)">
            <summary>
            写普通耗时日志(方法名哈希为logtag)
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:XXF.Log.TimeWatchLog.Write(XXF.BasicService.MonitorPlatform.Model.ParamBinds)">
            <summary>
            写耗时日志
            </summary>
            <param name="paramBinds"></param>
        </member>
        <member name="T:XXF.Log.VisitLog">
            <summary>
            访问日志记录
            </summary>
        </member>
        <member name="M:XXF.Log.VisitLog.Start">
            <summary>
            开启访问日志
            </summary>
        </member>
        <member name="M:XXF.Log.VisitLog.Write">
            <summary>
            写入访问日志
            </summary>
        </member>
        <member name="T:XXF.ProjectTool.ApiHelper">
            <summary>
            api帮助类
            </summary>
        </member>
        <member name="M:XXF.ProjectTool.ApiHelper.Get(System.String,System.Object)">
            <summary>
            获取api结果
            </summary>
            <param name="url"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.ApiHelper.Response(XXF.Api.ClientResult)">
            <summary>
            获取response对象
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.ApiHelper.GetTimeStamp(System.DateTime)">
            <summary>
            获取时间戳  使用协调世界时UTC减去1970年1月1日
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.ProjectTool.ControllerHelper">
            <summary>
            控制器帮助类
            </summary>
        </member>
        <member name="M:XXF.ProjectTool.ControllerHelper.Visit``1(System.Func{XXF.Db.DbConn,``0})">
            <summary>
            普通网站开发时使用
            有错误信息往外抛
            备注：若项目有特殊需要，可根据项目需求拷贝代码到自己项目中自定义。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.ControllerHelper.Visit(System.Func{XXF.Db.DbConn,System.Object})">
            <summary>
            Api项目接入时使用,封装api项目接入时候的错误检测及ServerResult封装
            屏蔽错误信息以serverresult约定输出
            备注：若项目有特殊需要，可根据项目需求拷贝代码到自己项目中自定义。
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.ProjectTool.DictionaryResult">
            <summary>
            默认约定的实体转字典存储结果 车毅
            </summary>
        </member>
        <member name="T:XXF.ProjectTool.DataTableHelper">
            <summary>
            dataTable 转 json输出字典
            用于简化api结果输出，使之不用通过自定义model的方式输出 车毅
            </summary>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.ToDictionaryList(System.Data.DataTable)">
            <summary>
            字典列表
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.ToDictionary(System.Data.DataTable)">
            <summary>
            单条字典结果
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.ConvertToModel``1(System.Data.DataTable)">
            <summary>
            List转datatable (未测)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.ConvertToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            List转datatable (未测)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.IsNullable(System.Type)">
            <summary>
            Determine of specified type is nullable
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.DataTableHelper.GetCoreType(System.Type)">
            <summary>
            Return underlying type if type is Nullable otherwise return the type.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.ProjectTool.EnumHelper`1">
            <summary>
            枚举操作工具类 车毅
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetAllEnumsOfList">
            <summary>
            将指定枚举转为列表控件的数据源
            </summary>
            <returns>Text:枚举的描述，value：枚举的值</returns>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetAllEnumsOfList2">
            <summary>
            将指定枚举转为列表控件的数据源
            </summary>
            <returns>Text:枚举的描述，value：枚举的值</returns>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetDataTableFromEnums">
            <summary>
            将制定枚举转化为dataTable  
            </summary>
            <returns>Text:枚举的描述，Value：枚举的值</returns>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetText(`0)">
            <summary>
            获得指定枚举的描述信息
            </summary>
            <param name="enumInstance"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetValue(`0)">
            <summary>
            通过枚举，获得其枚举值
            </summary>
            <param name="enumInstance"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.EnumHelper`1.GetEnum(System.String)">
            <summary>
            将字符串转换为枚举
            </summary>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.ProjectTool.MvcMethodFindHelper">
            <summary>
            mvc contoller 方法查找,并执行
            </summary>
        </member>
        <member name="M:XXF.ProjectTool.MvcMethodFindHelper.Find(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            查找当前mvc contoller方法，并执行
            仅支持默认约定的mvc模式
            </summary>
            <param name="controllerobject"></param>
            <param name="url"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.MvcMethodFindHelper.Call(System.Object,System.Reflection.MethodInfo,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            模拟调用方法
            </summary>
            <param name="controller"></param>
            <param name="method"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.ProjectTool.MvcMethodFindHelper.MvcMethodInfo">
            <summary>
            自定义mvc方法信息
            </summary>
        </member>
        <member name="T:XXF.ProjectTool.SignHelper">
            <summary>
            sign验证辅助类
            </summary>
        </member>
        <member name="F:XXF.ProjectTool.SignHelper.splitCharOne">
            <summary>
            第一个分隔符
            </summary>
        </member>
        <member name="F:XXF.ProjectTool.SignHelper.splitCharTwo">
            <summary>
            第二个分隔符
            </summary>
        </member>
        <member name="M:XXF.ProjectTool.SignHelper.ValidateSign(System.Web.HttpRequest,System.Int32,System.String@)">
            <summary>
            验证sign
            </summary>
            <param name="request"></param>
            <param name="err"></param>
             <param name="intervalTime"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.SignHelper.GetAsc(System.String)">
            <summary>
            获取字符串的asc编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XXF.ProjectTool.SignHelper.SignModel.key">
            <summary>
            key值
            </summary>
        </member>
        <member name="P:XXF.ProjectTool.SignHelper.SignModel.value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XXF.ProjectTool.SqlHelper">
            <summary>
            sql帮助类
            用于sql的一些处理方式的封装 车毅
            举例：sql安全检查，危险字符过滤，命令拼接，统一分页（多表，单表），where条件拼接
            sql耗时检测等
            </summary> 
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.CmdIn(System.Collections.Generic.List{XXF.Db.ProcedureParameter},System.String)">
            <summary>
            ,分隔的in 
            举例 name in ('a','b','c'); 
            </summary>
            <param name="splits"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.Pager1(XXF.Db.DbConn,System.String,System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页1 wsd_page_1： 根据唯一字段唯一值按大小排序，如ID
            备注：数据库需要安装Sys_Page1存储过程
            采用min,max算法分页,性能最优,可能有部分数据（相同值的排序字段处于分页时）丢失，有适用范围，详情百度
            http://www.jiaonan.tv/html/blog/1/26473.htm
            </summary>
            <param name="tb">表名</param>
            <param name="collist">要查询出的字段列表,*表示全部字段</param>
            <param name="condition">查询条件 ,不带where</param>
            <param name="col">排序列 例：ID</param>
            <param name="coltype">列的类型,0-数字类型,1-字符类型</param>
            <param name="orderby">--排序,FALSE-顺序,TRUE-倒序</param>
            <param name="pagesize">每页记录数</param>
            <param name="page">当前页</param>
            <param name="records">总记录数：为0则计算总记录数</param>
            <returns>分页记录</returns>
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.Pager2(XXF.Db.DbConn,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             分页2 wsd_page_2：单表任意排序
             备注：数据库需要安装Sys_Page2存储过程
             采用not in的算法方式分页，性能不是最佳 http://www.jiaonan.tv/html/blog/1/26473.htm
            </summary>
            <param name="tb">表名  例: news</param>
            <param name="collist">要查询出的字段列表,*表示全部字段</param>
            <param name="where">查询条件，不带where 例：classid = 2</param>
            <param name="orderby">排序条件 例：order by tuijian desc,id desc</param>
            <param name="pagesize">每页条数</param>
            <param name="page">当前页码</param>
            <param name="records">总记录数：为0则重新计算</param>
            <returns>分页记录</returns>
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.Pager3(XXF.Db.DbConn,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            分页3： 单表/多表通用分页存储过程 wsd_page_3
            备注：数据库需要安装Sys_Page3存储过程
            好像是颠倒算法，效率还行。http://www.jiaonan.tv/html/blog/1/26473.htm
            </summary>
            <param name="tb">表名 例： table1 inner join table2 on table1.xx=table2.xx </param>
            <param name="collist">需要获取字段 例: tabl1.xx,table2.*,注意，需要把排序列都选上</param>
            <param name="where">条件,不带where</param>
            <param name="orderby">最内层orderby(需要带上表前缀，注意asc 必须写上) 例: order by table1.xxx desc,table2.ad asc "</param>
            <param name="orderbyo">最外城orderby xxx.desc,ad asc</param>        
            <param name="pagesize">每页条数</param>
            <param name="page">页数</param>
            <param name="records">记录条数</param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.Visit``1(System.Func{XXF.Db.SimpleProcedureParameter,``0})">
            <summary>
            sql访问拦截器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.ProjectTool.SqlHelper.Visit(System.Func{XXF.Db.SimpleProcedureParameter,System.Data.DataTable})">
            <summary>
            sql访问拦截器 非泛型版本
            默认DataTable 返回 List{DictionaryResult} Model对象集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.getValueString(System.String)">
            <summary>
            获取key,返回string格式
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.getValueByte(System.String)">
            <summary>
            获取key,返回byte[]格式
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetValue``1(System.String)">
            <summary>
            获取Key,返回泛型T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue(System.String,System.Byte[])">
            <summary>
            设置一个值 key值重复则覆盖
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue(System.String,System.Byte[],System.DateTime)">
            <summary>
            设置一个值 key值重复则覆盖
            </summary>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <param name="expiresAt">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            设置一个值 key值重复则覆盖
            </summary>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <param name="timespan">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue``1(System.String,``0)">
            <summary>
            设置一个值 Key值重复则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue``1(System.String,``0,System.DateTime)">
            <summary>
            设置一个值 key值重复则覆盖
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <param name="expiresAt">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetValue``1(System.String,``0,System.TimeSpan)">
            <summary>
            设置一个值 key值重复则覆盖
            </summary>
            <param name="key">key值</param>
            <param name="value">value值</param>
            <param name="timespan">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetHashFields(System.String)">
            <summary>
            获得某个hash型key下的所有字段
            </summary>
            <param name="hashId"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetHashValues(System.String)">
            <summary>
            获得某个hash型key下的所有值
            </summary>
            <param name="hashId"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetHashField(System.String,System.String)">
            <summary>
            获得hash型key某个字段的值
            </summary>
            <param name="key"></param>
            <param name="field"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetHashField(System.String,System.String,System.String)">
            <summary>
            设置hash型key某个字段的值
            </summary>
            <param name="key"></param>
            <param name="field"></param>
            <param name="value"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.SetHashIncr(System.String,System.String,System.Int32)">
             <summary>
            使某个字段增加
             </summary>
             <param name="key"></param>
             <param name="field"></param>
             <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.HMSet(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Object})">
            <summary>
            hash表批量增加数据
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.HMGet(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            hash表批量获取数据
            </summary>
            <param name="key"></param>
            <param name="fields"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.AddItemToListRight(System.String,System.String)">
            <summary>
            向list类型数据添加成员，向列表底部(右侧)添加
            </summary>
            <param name="Item"></param>
            <param name="list"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.AddItemToListLeft(System.String,System.String)">
            <summary>
            向list类型数据添加成员，向列表顶部(左侧)添加
            </summary>
            <param name="list"></param>
            <param name="item"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.AddRangeToList(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            将多个值添加至 redis  List中
            </summary>
            <param name="list"></param>
            <param name="items"></param>
            <param name="seconds"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.ReAddRangeToList(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            将多个值添加至 redis  List中
            </summary>
            <param name="list"></param>
            <param name="items"></param>
            <param name="dateTime"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.ReAddRangeToList(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            将多个值添加至 redis  List中
            </summary>
            <param name="list"></param>
            <param name="items"></param>
            <param name="dateTime"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetAllItems(System.String)">
            <summary>
            从list类型数据读取所有成员
            </summary>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetItemFromList(System.String,System.Int32)">
            <summary>
            从list类型数据指定索引处获取数据，支持正索引和负索引
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetRangeToList(System.String,System.Int32,System.Int32)">
            <summary>
            从列表中批量获取数据
            </summary>
            <param name="list"></param>
            <param name="values"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.LRemove(System.String,System.Int32,System.String)">
            <summary>
            从列表中删除指定数量的元素
            </summary>
            <param name="list"></param>
            <param name="count"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetItemToSet(System.String,System.String)">
            <summary>
            向集合中添加数据
            </summary>
            <param name="item"></param>
            <param name="set"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetAllItemsFromSet(System.String)">
            <summary>
            获得集合中所有数据
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetSetDiff(System.String,System.String[])">
            <summary>
            获取fromSet集合和其他集合不同的数据
            </summary>
            <param name="fromSet"></param>
            <param name="toSet"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetSetUnion(System.String[])">
            <summary>
            获得所有集合的并集
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetSetInter(System.String[])">
            <summary>
            获得所有集合的交集
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.AddItemToSortedSet(System.String,System.String,System.Int64)">
            <summary>
            向有序集合中添加元素
            </summary>
            <param name="set"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetItemIndexInSortedSetDesc(System.String,System.String)">
            <summary>
            获得某个值在有序集合中的排名，按分数的降序排列
            </summary>
            <param name="set"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetItemIndexInSortedSet(System.String,System.String)">
            <summary>
            获得某个值在有序集合中的排名，按分数的升序排列
            </summary>
            <param name="set"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetItemScoreInSortedSet(System.String,System.String)">
            <summary>
            获得有序集合中某个值得分数
            </summary>
            <param name="set"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetRangeFromSortedSet(System.String,System.Int32,System.Int32)">
            <summary>
            获得有序集合中，某个排名范围的所有值
            </summary>
            <param name="set"></param>
            <param name="beginRank"></param>
            <param name="endRank"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetRangeFromSortedSet(System.String,System.Double,System.Double)">
            <summary>
            获得有序集合中，某个分数范围内的所有值，升序
            </summary>
            <param name="set"></param>
            <param name="beginScore"></param>
            <param name="endScore"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.GetRangeFromSortedSetDesc(System.String,System.Double,System.Double)">
            <summary>
            获得有序集合中，某个分数范围内的所有值，降序
            </summary>
            <param name="set"></param>
            <param name="beginScore"></param>
            <param name="endScore"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.Delete(System.String)">
            <summary>
            删除一个key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.Deletes(System.String[])">
            <summary>
            删除一批key
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisDb.QueueCommand(System.Action{XXF.Redis.RedisDb},System.Action)">
            <summary>
            批量数据执行
            </summary>
            <param name="command"></param>
            <param name="onSuccessCallback"></param>
        </member>
        <member name="T:XXF.Redis.RedisManager">
            <summary>
            Redis管理类
            </summary>
        </member>
        <member name="M:XXF.Redis.RedisManager.GetPoolClient(System.String)">
            <summary>
            获取连接池客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Redis.RedisManager.CreateClient(System.String,System.Int32,System.String)">
            <summary>
            独立创建一个客户端
            </summary>
            <param name="hostip"></param>
            <param name="port"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Serialization.JsonHelper">
            <summary>
            jason 序列化方式
            </summary>
        </member>
        <member name="M:XXF.Serialization.JsonHelper.Serializer(System.Object)">
            <summary>
            jason序列化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Serialization.JsonHelper.Deserialize``1(System.String)">
            <summary>
            jason反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Serialization.JsonHelper.Deserialize(System.String,System.Type)">
            <summary>
            jason反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Serialization.XmlProvider`1">
            <summary>
            XML序列化(gbk编码)提供类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XXF.Serialization.XmlProvider`1.Serializer(`0)">
            <summary>
            序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Serialization.XmlProvider`1.Serializer(`0,System.Boolean)">
            <summary>
            序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XXF.Serialization.XmlProvider`1.Deserialize(System.String)">
            <summary>
            反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XXF.Tool.Convert24Provider">
            <summary>
            24进制乱序
            </summary>
        </member>
        <member name="M:XXF.Tool.Convert24Provider.To(System.Int64)">
            <summary>
            数字转24进制
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:XXF.Tool.Convert24Provider.From(System.String)">
            <summary>
            24进制转数字
            </summary>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="T:XXF.Tool.Convert34Provider">
            <summary>
            34位编码提供类
            </summary>
        </member>
        <member name="M:XXF.Tool.Convert34Provider.ConvertDiaTo34(System.Int64)">
            <summary>
            调用则执行转34位编码
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:XXF.Tool.Convert34Provider.ToString">
            <summary>
            获取34位编码字符串
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
